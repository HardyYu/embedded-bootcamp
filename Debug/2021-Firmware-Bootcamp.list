
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005044  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c0  080051c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080051c0  080051c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051c0  080051c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080051d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080051d4  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed0d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe3  00000000  00000000  0002ed41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00030d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00031ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c67  00000000  00000000  000327a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011121  00000000  00000000  0004c407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c25  00000000  00000000  0005d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f414d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  000f41a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050ec 	.word	0x080050ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080050ec 	.word	0x080050ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0244      	lsls	r4, r0, #9
 80003fe:	0045      	lsls	r5, r0, #1
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	0a64      	lsrs	r4, r4, #9
 8000404:	1c0f      	adds	r7, r1, #0
 8000406:	0e2d      	lsrs	r5, r5, #24
 8000408:	0fc6      	lsrs	r6, r0, #31
 800040a:	2d00      	cmp	r5, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e08d      	b.n	800052c <__aeabi_fmul+0x138>
 8000410:	2dff      	cmp	r5, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fmul+0x22>
 8000414:	e092      	b.n	800053c <__aeabi_fmul+0x148>
 8000416:	2300      	movs	r3, #0
 8000418:	2080      	movs	r0, #128	; 0x80
 800041a:	4699      	mov	r9, r3
 800041c:	469a      	mov	sl, r3
 800041e:	00e4      	lsls	r4, r4, #3
 8000420:	04c0      	lsls	r0, r0, #19
 8000422:	4304      	orrs	r4, r0
 8000424:	3d7f      	subs	r5, #127	; 0x7f
 8000426:	0278      	lsls	r0, r7, #9
 8000428:	0a43      	lsrs	r3, r0, #9
 800042a:	4698      	mov	r8, r3
 800042c:	007b      	lsls	r3, r7, #1
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fff      	lsrs	r7, r7, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d100      	bne.n	8000438 <__aeabi_fmul+0x44>
 8000436:	e070      	b.n	800051a <__aeabi_fmul+0x126>
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d100      	bne.n	800043e <__aeabi_fmul+0x4a>
 800043c:	e086      	b.n	800054c <__aeabi_fmul+0x158>
 800043e:	4642      	mov	r2, r8
 8000440:	00d0      	lsls	r0, r2, #3
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	3b7f      	subs	r3, #127	; 0x7f
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	2300      	movs	r3, #0
 800044a:	04d2      	lsls	r2, r2, #19
 800044c:	4302      	orrs	r2, r0
 800044e:	4690      	mov	r8, r2
 8000450:	469c      	mov	ip, r3
 8000452:	0031      	movs	r1, r6
 8000454:	464b      	mov	r3, r9
 8000456:	4079      	eors	r1, r7
 8000458:	1c68      	adds	r0, r5, #1
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d81c      	bhi.n	8000498 <__aeabi_fmul+0xa4>
 800045e:	4a76      	ldr	r2, [pc, #472]	; (8000638 <__aeabi_fmul+0x244>)
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	58d3      	ldr	r3, [r2, r3]
 8000464:	469f      	mov	pc, r3
 8000466:	0039      	movs	r1, r7
 8000468:	4644      	mov	r4, r8
 800046a:	46e2      	mov	sl, ip
 800046c:	4653      	mov	r3, sl
 800046e:	2b02      	cmp	r3, #2
 8000470:	d00f      	beq.n	8000492 <__aeabi_fmul+0x9e>
 8000472:	2b03      	cmp	r3, #3
 8000474:	d100      	bne.n	8000478 <__aeabi_fmul+0x84>
 8000476:	e0d7      	b.n	8000628 <__aeabi_fmul+0x234>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d137      	bne.n	80004ec <__aeabi_fmul+0xf8>
 800047c:	2000      	movs	r0, #0
 800047e:	2400      	movs	r4, #0
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	4320      	orrs	r0, r4
 8000484:	07c9      	lsls	r1, r1, #31
 8000486:	4308      	orrs	r0, r1
 8000488:	bce0      	pop	{r5, r6, r7}
 800048a:	46ba      	mov	sl, r7
 800048c:	46b1      	mov	r9, r6
 800048e:	46a8      	mov	r8, r5
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	2400      	movs	r4, #0
 8000496:	e7f3      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000498:	0c26      	lsrs	r6, r4, #16
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c22      	lsrs	r2, r4, #16
 800049e:	4644      	mov	r4, r8
 80004a0:	0424      	lsls	r4, r4, #16
 80004a2:	0c24      	lsrs	r4, r4, #16
 80004a4:	4643      	mov	r3, r8
 80004a6:	0027      	movs	r7, r4
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	4357      	muls	r7, r2
 80004ac:	4374      	muls	r4, r6
 80004ae:	435a      	muls	r2, r3
 80004b0:	435e      	muls	r6, r3
 80004b2:	1912      	adds	r2, r2, r4
 80004b4:	0c3b      	lsrs	r3, r7, #16
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	429c      	cmp	r4, r3
 80004ba:	d903      	bls.n	80004c4 <__aeabi_fmul+0xd0>
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	0252      	lsls	r2, r2, #9
 80004c0:	4694      	mov	ip, r2
 80004c2:	4466      	add	r6, ip
 80004c4:	043f      	lsls	r7, r7, #16
 80004c6:	041a      	lsls	r2, r3, #16
 80004c8:	0c3f      	lsrs	r7, r7, #16
 80004ca:	19d2      	adds	r2, r2, r7
 80004cc:	0194      	lsls	r4, r2, #6
 80004ce:	1e67      	subs	r7, r4, #1
 80004d0:	41bc      	sbcs	r4, r7
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	0e92      	lsrs	r2, r2, #26
 80004d6:	199b      	adds	r3, r3, r6
 80004d8:	4314      	orrs	r4, r2
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	431c      	orrs	r4, r3
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	d400      	bmi.n	80004e4 <__aeabi_fmul+0xf0>
 80004e2:	e09b      	b.n	800061c <__aeabi_fmul+0x228>
 80004e4:	2301      	movs	r3, #1
 80004e6:	0862      	lsrs	r2, r4, #1
 80004e8:	401c      	ands	r4, r3
 80004ea:	4314      	orrs	r4, r2
 80004ec:	0002      	movs	r2, r0
 80004ee:	327f      	adds	r2, #127	; 0x7f
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	dd64      	ble.n	80005be <__aeabi_fmul+0x1ca>
 80004f4:	0763      	lsls	r3, r4, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fmul+0x10e>
 80004f8:	230f      	movs	r3, #15
 80004fa:	4023      	ands	r3, r4
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fmul+0x10e>
 8000500:	3404      	adds	r4, #4
 8000502:	0123      	lsls	r3, r4, #4
 8000504:	d503      	bpl.n	800050e <__aeabi_fmul+0x11a>
 8000506:	0002      	movs	r2, r0
 8000508:	4b4c      	ldr	r3, [pc, #304]	; (800063c <__aeabi_fmul+0x248>)
 800050a:	3280      	adds	r2, #128	; 0x80
 800050c:	401c      	ands	r4, r3
 800050e:	2afe      	cmp	r2, #254	; 0xfe
 8000510:	dcbf      	bgt.n	8000492 <__aeabi_fmul+0x9e>
 8000512:	01a4      	lsls	r4, r4, #6
 8000514:	0a64      	lsrs	r4, r4, #9
 8000516:	b2d0      	uxtb	r0, r2
 8000518:	e7b2      	b.n	8000480 <__aeabi_fmul+0x8c>
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d13d      	bne.n	800059c <__aeabi_fmul+0x1a8>
 8000520:	464a      	mov	r2, r9
 8000522:	3301      	adds	r3, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4691      	mov	r9, r2
 8000528:	469c      	mov	ip, r3
 800052a:	e792      	b.n	8000452 <__aeabi_fmul+0x5e>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d129      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000530:	2304      	movs	r3, #4
 8000532:	4699      	mov	r9, r3
 8000534:	3b03      	subs	r3, #3
 8000536:	2500      	movs	r5, #0
 8000538:	469a      	mov	sl, r3
 800053a:	e774      	b.n	8000426 <__aeabi_fmul+0x32>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d11b      	bne.n	8000578 <__aeabi_fmul+0x184>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	25ff      	movs	r5, #255	; 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e76c      	b.n	8000426 <__aeabi_fmul+0x32>
 800054c:	4643      	mov	r3, r8
 800054e:	35ff      	adds	r5, #255	; 0xff
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10b      	bne.n	800056c <__aeabi_fmul+0x178>
 8000554:	2302      	movs	r3, #2
 8000556:	464a      	mov	r2, r9
 8000558:	431a      	orrs	r2, r3
 800055a:	4691      	mov	r9, r2
 800055c:	469c      	mov	ip, r3
 800055e:	e778      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000560:	4653      	mov	r3, sl
 8000562:	0031      	movs	r1, r6
 8000564:	2b02      	cmp	r3, #2
 8000566:	d000      	beq.n	800056a <__aeabi_fmul+0x176>
 8000568:	e783      	b.n	8000472 <__aeabi_fmul+0x7e>
 800056a:	e792      	b.n	8000492 <__aeabi_fmul+0x9e>
 800056c:	2303      	movs	r3, #3
 800056e:	464a      	mov	r2, r9
 8000570:	431a      	orrs	r2, r3
 8000572:	4691      	mov	r9, r2
 8000574:	469c      	mov	ip, r3
 8000576:	e76c      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	25ff      	movs	r5, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e750      	b.n	8000426 <__aeabi_fmul+0x32>
 8000584:	0020      	movs	r0, r4
 8000586:	f000 feff 	bl	8001388 <__clzsi2>
 800058a:	2576      	movs	r5, #118	; 0x76
 800058c:	1f43      	subs	r3, r0, #5
 800058e:	409c      	lsls	r4, r3
 8000590:	2300      	movs	r3, #0
 8000592:	426d      	negs	r5, r5
 8000594:	4699      	mov	r9, r3
 8000596:	469a      	mov	sl, r3
 8000598:	1a2d      	subs	r5, r5, r0
 800059a:	e744      	b.n	8000426 <__aeabi_fmul+0x32>
 800059c:	4640      	mov	r0, r8
 800059e:	f000 fef3 	bl	8001388 <__clzsi2>
 80005a2:	4642      	mov	r2, r8
 80005a4:	1f43      	subs	r3, r0, #5
 80005a6:	409a      	lsls	r2, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	1a2d      	subs	r5, r5, r0
 80005ac:	4690      	mov	r8, r2
 80005ae:	469c      	mov	ip, r3
 80005b0:	3d76      	subs	r5, #118	; 0x76
 80005b2:	e74e      	b.n	8000452 <__aeabi_fmul+0x5e>
 80005b4:	2480      	movs	r4, #128	; 0x80
 80005b6:	2100      	movs	r1, #0
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	03e4      	lsls	r4, r4, #15
 80005bc:	e760      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005be:	2301      	movs	r3, #1
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	2b1b      	cmp	r3, #27
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fmul+0x1d4>
 80005c6:	e759      	b.n	800047c <__aeabi_fmul+0x88>
 80005c8:	0022      	movs	r2, r4
 80005ca:	309e      	adds	r0, #158	; 0x9e
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	4084      	lsls	r4, r0
 80005d0:	0013      	movs	r3, r2
 80005d2:	1e62      	subs	r2, r4, #1
 80005d4:	4194      	sbcs	r4, r2
 80005d6:	431c      	orrs	r4, r3
 80005d8:	0763      	lsls	r3, r4, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005dc:	230f      	movs	r3, #15
 80005de:	4023      	ands	r3, r4
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005e4:	3404      	adds	r4, #4
 80005e6:	0163      	lsls	r3, r4, #5
 80005e8:	d51a      	bpl.n	8000620 <__aeabi_fmul+0x22c>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2400      	movs	r4, #0
 80005ee:	e747      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	03c0      	lsls	r0, r0, #15
 80005f4:	4204      	tst	r4, r0
 80005f6:	d009      	beq.n	800060c <__aeabi_fmul+0x218>
 80005f8:	4643      	mov	r3, r8
 80005fa:	4203      	tst	r3, r0
 80005fc:	d106      	bne.n	800060c <__aeabi_fmul+0x218>
 80005fe:	4644      	mov	r4, r8
 8000600:	4304      	orrs	r4, r0
 8000602:	0264      	lsls	r4, r4, #9
 8000604:	0039      	movs	r1, r7
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	e739      	b.n	8000480 <__aeabi_fmul+0x8c>
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	03c0      	lsls	r0, r0, #15
 8000610:	4304      	orrs	r4, r0
 8000612:	0264      	lsls	r4, r4, #9
 8000614:	0031      	movs	r1, r6
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	0a64      	lsrs	r4, r4, #9
 800061a:	e731      	b.n	8000480 <__aeabi_fmul+0x8c>
 800061c:	0028      	movs	r0, r5
 800061e:	e765      	b.n	80004ec <__aeabi_fmul+0xf8>
 8000620:	01a4      	lsls	r4, r4, #6
 8000622:	2000      	movs	r0, #0
 8000624:	0a64      	lsrs	r4, r4, #9
 8000626:	e72b      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000628:	2080      	movs	r0, #128	; 0x80
 800062a:	03c0      	lsls	r0, r0, #15
 800062c:	4304      	orrs	r4, r0
 800062e:	0264      	lsls	r4, r4, #9
 8000630:	20ff      	movs	r0, #255	; 0xff
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	e724      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	08005128 	.word	0x08005128
 800063c:	f7ffffff 	.word	0xf7ffffff

08000640 <__aeabi_i2f>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	2800      	cmp	r0, #0
 8000644:	d013      	beq.n	800066e <__aeabi_i2f+0x2e>
 8000646:	17c3      	asrs	r3, r0, #31
 8000648:	18c6      	adds	r6, r0, r3
 800064a:	405e      	eors	r6, r3
 800064c:	0fc4      	lsrs	r4, r0, #31
 800064e:	0030      	movs	r0, r6
 8000650:	f000 fe9a 	bl	8001388 <__clzsi2>
 8000654:	239e      	movs	r3, #158	; 0x9e
 8000656:	0005      	movs	r5, r0
 8000658:	1a1b      	subs	r3, r3, r0
 800065a:	2b96      	cmp	r3, #150	; 0x96
 800065c:	dc0f      	bgt.n	800067e <__aeabi_i2f+0x3e>
 800065e:	2808      	cmp	r0, #8
 8000660:	dd01      	ble.n	8000666 <__aeabi_i2f+0x26>
 8000662:	3d08      	subs	r5, #8
 8000664:	40ae      	lsls	r6, r5
 8000666:	0276      	lsls	r6, r6, #9
 8000668:	0a76      	lsrs	r6, r6, #9
 800066a:	b2d8      	uxtb	r0, r3
 800066c:	e002      	b.n	8000674 <__aeabi_i2f+0x34>
 800066e:	2400      	movs	r4, #0
 8000670:	2000      	movs	r0, #0
 8000672:	2600      	movs	r6, #0
 8000674:	05c0      	lsls	r0, r0, #23
 8000676:	4330      	orrs	r0, r6
 8000678:	07e4      	lsls	r4, r4, #31
 800067a:	4320      	orrs	r0, r4
 800067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800067e:	2b99      	cmp	r3, #153	; 0x99
 8000680:	dd0c      	ble.n	800069c <__aeabi_i2f+0x5c>
 8000682:	2205      	movs	r2, #5
 8000684:	0031      	movs	r1, r6
 8000686:	1a12      	subs	r2, r2, r0
 8000688:	40d1      	lsrs	r1, r2
 800068a:	000a      	movs	r2, r1
 800068c:	0001      	movs	r1, r0
 800068e:	0030      	movs	r0, r6
 8000690:	311b      	adds	r1, #27
 8000692:	4088      	lsls	r0, r1
 8000694:	1e41      	subs	r1, r0, #1
 8000696:	4188      	sbcs	r0, r1
 8000698:	4302      	orrs	r2, r0
 800069a:	0016      	movs	r6, r2
 800069c:	2d05      	cmp	r5, #5
 800069e:	dc12      	bgt.n	80006c6 <__aeabi_i2f+0x86>
 80006a0:	0031      	movs	r1, r6
 80006a2:	4f0d      	ldr	r7, [pc, #52]	; (80006d8 <__aeabi_i2f+0x98>)
 80006a4:	4039      	ands	r1, r7
 80006a6:	0772      	lsls	r2, r6, #29
 80006a8:	d009      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006aa:	200f      	movs	r0, #15
 80006ac:	4030      	ands	r0, r6
 80006ae:	2804      	cmp	r0, #4
 80006b0:	d005      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006b2:	3104      	adds	r1, #4
 80006b4:	014a      	lsls	r2, r1, #5
 80006b6:	d502      	bpl.n	80006be <__aeabi_i2f+0x7e>
 80006b8:	239f      	movs	r3, #159	; 0x9f
 80006ba:	4039      	ands	r1, r7
 80006bc:	1b5b      	subs	r3, r3, r5
 80006be:	0189      	lsls	r1, r1, #6
 80006c0:	0a4e      	lsrs	r6, r1, #9
 80006c2:	b2d8      	uxtb	r0, r3
 80006c4:	e7d6      	b.n	8000674 <__aeabi_i2f+0x34>
 80006c6:	1f6a      	subs	r2, r5, #5
 80006c8:	4096      	lsls	r6, r2
 80006ca:	0031      	movs	r1, r6
 80006cc:	4f02      	ldr	r7, [pc, #8]	; (80006d8 <__aeabi_i2f+0x98>)
 80006ce:	4039      	ands	r1, r7
 80006d0:	0772      	lsls	r2, r6, #29
 80006d2:	d0f4      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006d4:	e7e9      	b.n	80006aa <__aeabi_i2f+0x6a>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	fbffffff 	.word	0xfbffffff

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f000 fdfa 	bl	8001388 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f000 fcfa 	bl	8001388 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_dmul>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4698      	mov	r8, r3
 8000d62:	030c      	lsls	r4, r1, #12
 8000d64:	004b      	lsls	r3, r1, #1
 8000d66:	0006      	movs	r6, r0
 8000d68:	4692      	mov	sl, r2
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	0b24      	lsrs	r4, r4, #12
 8000d6e:	0d5b      	lsrs	r3, r3, #21
 8000d70:	0fcf      	lsrs	r7, r1, #31
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dmul+0x24>
 8000d76:	e15c      	b.n	8001032 <__aeabi_dmul+0x2de>
 8000d78:	4ad9      	ldr	r2, [pc, #868]	; (80010e0 <__aeabi_dmul+0x38c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_dmul+0x2c>
 8000d7e:	e175      	b.n	800106c <__aeabi_dmul+0x318>
 8000d80:	0f42      	lsrs	r2, r0, #29
 8000d82:	00e4      	lsls	r4, r4, #3
 8000d84:	4314      	orrs	r4, r2
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	0412      	lsls	r2, r2, #16
 8000d8a:	4314      	orrs	r4, r2
 8000d8c:	4ad5      	ldr	r2, [pc, #852]	; (80010e4 <__aeabi_dmul+0x390>)
 8000d8e:	00c5      	lsls	r5, r0, #3
 8000d90:	4694      	mov	ip, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	469b      	mov	fp, r3
 8000d9c:	4643      	mov	r3, r8
 8000d9e:	4642      	mov	r2, r8
 8000da0:	031e      	lsls	r6, r3, #12
 8000da2:	0fd2      	lsrs	r2, r2, #31
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4650      	mov	r0, sl
 8000da8:	4690      	mov	r8, r2
 8000daa:	0b36      	lsrs	r6, r6, #12
 8000dac:	0d5b      	lsrs	r3, r3, #21
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dmul+0x5e>
 8000db0:	e120      	b.n	8000ff4 <__aeabi_dmul+0x2a0>
 8000db2:	4acb      	ldr	r2, [pc, #812]	; (80010e0 <__aeabi_dmul+0x38c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d100      	bne.n	8000dba <__aeabi_dmul+0x66>
 8000db8:	e162      	b.n	8001080 <__aeabi_dmul+0x32c>
 8000dba:	49ca      	ldr	r1, [pc, #808]	; (80010e4 <__aeabi_dmul+0x390>)
 8000dbc:	0f42      	lsrs	r2, r0, #29
 8000dbe:	468c      	mov	ip, r1
 8000dc0:	9900      	ldr	r1, [sp, #0]
 8000dc2:	4463      	add	r3, ip
 8000dc4:	00f6      	lsls	r6, r6, #3
 8000dc6:	468c      	mov	ip, r1
 8000dc8:	4316      	orrs	r6, r2
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	449c      	add	ip, r3
 8000dce:	0412      	lsls	r2, r2, #16
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	4316      	orrs	r6, r2
 8000dd4:	00c2      	lsls	r2, r0, #3
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	9900      	ldr	r1, [sp, #0]
 8000ddc:	4643      	mov	r3, r8
 8000dde:	3101      	adds	r1, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	4649      	mov	r1, r9
 8000de4:	407b      	eors	r3, r7
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	290f      	cmp	r1, #15
 8000dea:	d826      	bhi.n	8000e3a <__aeabi_dmul+0xe6>
 8000dec:	4bbe      	ldr	r3, [pc, #760]	; (80010e8 <__aeabi_dmul+0x394>)
 8000dee:	0089      	lsls	r1, r1, #2
 8000df0:	5859      	ldr	r1, [r3, r1]
 8000df2:	468f      	mov	pc, r1
 8000df4:	4643      	mov	r3, r8
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	0034      	movs	r4, r6
 8000dfa:	0015      	movs	r5, r2
 8000dfc:	4683      	mov	fp, r0
 8000dfe:	465b      	mov	r3, fp
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d016      	beq.n	8000e32 <__aeabi_dmul+0xde>
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dmul+0xb6>
 8000e08:	e203      	b.n	8001212 <__aeabi_dmul+0x4be>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_dmul+0xbc>
 8000e0e:	e0cd      	b.n	8000fac <__aeabi_dmul+0x258>
 8000e10:	2200      	movs	r2, #0
 8000e12:	2400      	movs	r4, #0
 8000e14:	2500      	movs	r5, #0
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	0512      	lsls	r2, r2, #20
 8000e1a:	4322      	orrs	r2, r4
 8000e1c:	07db      	lsls	r3, r3, #31
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	0028      	movs	r0, r5
 8000e22:	0011      	movs	r1, r2
 8000e24:	b007      	add	sp, #28
 8000e26:	bcf0      	pop	{r4, r5, r6, r7}
 8000e28:	46bb      	mov	fp, r7
 8000e2a:	46b2      	mov	sl, r6
 8000e2c:	46a9      	mov	r9, r5
 8000e2e:	46a0      	mov	r8, r4
 8000e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e32:	2400      	movs	r4, #0
 8000e34:	2500      	movs	r5, #0
 8000e36:	4aaa      	ldr	r2, [pc, #680]	; (80010e0 <__aeabi_dmul+0x38c>)
 8000e38:	e7ed      	b.n	8000e16 <__aeabi_dmul+0xc2>
 8000e3a:	0c28      	lsrs	r0, r5, #16
 8000e3c:	042d      	lsls	r5, r5, #16
 8000e3e:	0c2d      	lsrs	r5, r5, #16
 8000e40:	002b      	movs	r3, r5
 8000e42:	0c11      	lsrs	r1, r2, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	0c12      	lsrs	r2, r2, #16
 8000e48:	4353      	muls	r3, r2
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	002f      	movs	r7, r5
 8000e50:	4343      	muls	r3, r0
 8000e52:	4699      	mov	r9, r3
 8000e54:	434f      	muls	r7, r1
 8000e56:	444f      	add	r7, r9
 8000e58:	46bb      	mov	fp, r7
 8000e5a:	4647      	mov	r7, r8
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	0c3f      	lsrs	r7, r7, #16
 8000e60:	46ba      	mov	sl, r7
 8000e62:	4343      	muls	r3, r0
 8000e64:	44da      	add	sl, fp
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	45d1      	cmp	r9, sl
 8000e6a:	d904      	bls.n	8000e76 <__aeabi_dmul+0x122>
 8000e6c:	2780      	movs	r7, #128	; 0x80
 8000e6e:	027f      	lsls	r7, r7, #9
 8000e70:	46b9      	mov	r9, r7
 8000e72:	444b      	add	r3, r9
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	4653      	mov	r3, sl
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	4653      	mov	r3, sl
 8000e7e:	041f      	lsls	r7, r3, #16
 8000e80:	4643      	mov	r3, r8
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	0c1b      	lsrs	r3, r3, #16
 8000e86:	4698      	mov	r8, r3
 8000e88:	003b      	movs	r3, r7
 8000e8a:	4443      	add	r3, r8
 8000e8c:	9304      	str	r3, [sp, #16]
 8000e8e:	0c33      	lsrs	r3, r6, #16
 8000e90:	0436      	lsls	r6, r6, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	4698      	mov	r8, r3
 8000e96:	0033      	movs	r3, r6
 8000e98:	4343      	muls	r3, r0
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	4343      	muls	r3, r0
 8000ea0:	002f      	movs	r7, r5
 8000ea2:	469a      	mov	sl, r3
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	4377      	muls	r7, r6
 8000ea8:	435d      	muls	r5, r3
 8000eaa:	0c38      	lsrs	r0, r7, #16
 8000eac:	444d      	add	r5, r9
 8000eae:	1945      	adds	r5, r0, r5
 8000eb0:	45a9      	cmp	r9, r5
 8000eb2:	d903      	bls.n	8000ebc <__aeabi_dmul+0x168>
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	4699      	mov	r9, r3
 8000eba:	44ca      	add	sl, r9
 8000ebc:	043f      	lsls	r7, r7, #16
 8000ebe:	0c28      	lsrs	r0, r5, #16
 8000ec0:	0c3f      	lsrs	r7, r7, #16
 8000ec2:	042d      	lsls	r5, r5, #16
 8000ec4:	19ed      	adds	r5, r5, r7
 8000ec6:	0c27      	lsrs	r7, r4, #16
 8000ec8:	0424      	lsls	r4, r4, #16
 8000eca:	0c24      	lsrs	r4, r4, #16
 8000ecc:	0003      	movs	r3, r0
 8000ece:	0020      	movs	r0, r4
 8000ed0:	4350      	muls	r0, r2
 8000ed2:	437a      	muls	r2, r7
 8000ed4:	4691      	mov	r9, r2
 8000ed6:	003a      	movs	r2, r7
 8000ed8:	4453      	add	r3, sl
 8000eda:	9305      	str	r3, [sp, #20]
 8000edc:	0c03      	lsrs	r3, r0, #16
 8000ede:	469a      	mov	sl, r3
 8000ee0:	434a      	muls	r2, r1
 8000ee2:	4361      	muls	r1, r4
 8000ee4:	4449      	add	r1, r9
 8000ee6:	4451      	add	r1, sl
 8000ee8:	44ab      	add	fp, r5
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d903      	bls.n	8000ef6 <__aeabi_dmul+0x1a2>
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	025b      	lsls	r3, r3, #9
 8000ef2:	4699      	mov	r9, r3
 8000ef4:	444a      	add	r2, r9
 8000ef6:	0400      	lsls	r0, r0, #16
 8000ef8:	0c0b      	lsrs	r3, r1, #16
 8000efa:	0c00      	lsrs	r0, r0, #16
 8000efc:	0409      	lsls	r1, r1, #16
 8000efe:	1809      	adds	r1, r1, r0
 8000f00:	0020      	movs	r0, r4
 8000f02:	4699      	mov	r9, r3
 8000f04:	4643      	mov	r3, r8
 8000f06:	4370      	muls	r0, r6
 8000f08:	435c      	muls	r4, r3
 8000f0a:	437e      	muls	r6, r7
 8000f0c:	435f      	muls	r7, r3
 8000f0e:	0c03      	lsrs	r3, r0, #16
 8000f10:	4698      	mov	r8, r3
 8000f12:	19a4      	adds	r4, r4, r6
 8000f14:	4444      	add	r4, r8
 8000f16:	444a      	add	r2, r9
 8000f18:	9703      	str	r7, [sp, #12]
 8000f1a:	42a6      	cmp	r6, r4
 8000f1c:	d904      	bls.n	8000f28 <__aeabi_dmul+0x1d4>
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	025b      	lsls	r3, r3, #9
 8000f22:	4698      	mov	r8, r3
 8000f24:	4447      	add	r7, r8
 8000f26:	9703      	str	r7, [sp, #12]
 8000f28:	0423      	lsls	r3, r4, #16
 8000f2a:	9e02      	ldr	r6, [sp, #8]
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	9b05      	ldr	r3, [sp, #20]
 8000f30:	445e      	add	r6, fp
 8000f32:	4698      	mov	r8, r3
 8000f34:	42ae      	cmp	r6, r5
 8000f36:	41ad      	sbcs	r5, r5
 8000f38:	1876      	adds	r6, r6, r1
 8000f3a:	428e      	cmp	r6, r1
 8000f3c:	4189      	sbcs	r1, r1
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	0c00      	lsrs	r0, r0, #16
 8000f42:	4450      	add	r0, sl
 8000f44:	4440      	add	r0, r8
 8000f46:	426d      	negs	r5, r5
 8000f48:	1947      	adds	r7, r0, r5
 8000f4a:	46b8      	mov	r8, r7
 8000f4c:	4693      	mov	fp, r2
 8000f4e:	4249      	negs	r1, r1
 8000f50:	4689      	mov	r9, r1
 8000f52:	44c3      	add	fp, r8
 8000f54:	44d9      	add	r9, fp
 8000f56:	4298      	cmp	r0, r3
 8000f58:	4180      	sbcs	r0, r0
 8000f5a:	45a8      	cmp	r8, r5
 8000f5c:	41ad      	sbcs	r5, r5
 8000f5e:	4593      	cmp	fp, r2
 8000f60:	4192      	sbcs	r2, r2
 8000f62:	4589      	cmp	r9, r1
 8000f64:	4189      	sbcs	r1, r1
 8000f66:	426d      	negs	r5, r5
 8000f68:	4240      	negs	r0, r0
 8000f6a:	4328      	orrs	r0, r5
 8000f6c:	0c24      	lsrs	r4, r4, #16
 8000f6e:	4252      	negs	r2, r2
 8000f70:	4249      	negs	r1, r1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	9b03      	ldr	r3, [sp, #12]
 8000f76:	1900      	adds	r0, r0, r4
 8000f78:	1880      	adds	r0, r0, r2
 8000f7a:	18c7      	adds	r7, r0, r3
 8000f7c:	464b      	mov	r3, r9
 8000f7e:	0ddc      	lsrs	r4, r3, #23
 8000f80:	9b04      	ldr	r3, [sp, #16]
 8000f82:	0275      	lsls	r5, r6, #9
 8000f84:	431d      	orrs	r5, r3
 8000f86:	1e6a      	subs	r2, r5, #1
 8000f88:	4195      	sbcs	r5, r2
 8000f8a:	464b      	mov	r3, r9
 8000f8c:	0df6      	lsrs	r6, r6, #23
 8000f8e:	027f      	lsls	r7, r7, #9
 8000f90:	4335      	orrs	r5, r6
 8000f92:	025a      	lsls	r2, r3, #9
 8000f94:	433c      	orrs	r4, r7
 8000f96:	4315      	orrs	r5, r2
 8000f98:	01fb      	lsls	r3, r7, #7
 8000f9a:	d400      	bmi.n	8000f9e <__aeabi_dmul+0x24a>
 8000f9c:	e11c      	b.n	80011d8 <__aeabi_dmul+0x484>
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	086a      	lsrs	r2, r5, #1
 8000fa2:	400d      	ands	r5, r1
 8000fa4:	4315      	orrs	r5, r2
 8000fa6:	07e2      	lsls	r2, r4, #31
 8000fa8:	4315      	orrs	r5, r2
 8000faa:	0864      	lsrs	r4, r4, #1
 8000fac:	494f      	ldr	r1, [pc, #316]	; (80010ec <__aeabi_dmul+0x398>)
 8000fae:	4461      	add	r1, ip
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_dmul+0x262>
 8000fb4:	e0b0      	b.n	8001118 <__aeabi_dmul+0x3c4>
 8000fb6:	076b      	lsls	r3, r5, #29
 8000fb8:	d009      	beq.n	8000fce <__aeabi_dmul+0x27a>
 8000fba:	220f      	movs	r2, #15
 8000fbc:	402a      	ands	r2, r5
 8000fbe:	2a04      	cmp	r2, #4
 8000fc0:	d005      	beq.n	8000fce <__aeabi_dmul+0x27a>
 8000fc2:	1d2a      	adds	r2, r5, #4
 8000fc4:	42aa      	cmp	r2, r5
 8000fc6:	41ad      	sbcs	r5, r5
 8000fc8:	426d      	negs	r5, r5
 8000fca:	1964      	adds	r4, r4, r5
 8000fcc:	0015      	movs	r5, r2
 8000fce:	01e3      	lsls	r3, r4, #7
 8000fd0:	d504      	bpl.n	8000fdc <__aeabi_dmul+0x288>
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <__aeabi_dmul+0x39c>)
 8000fd6:	00c9      	lsls	r1, r1, #3
 8000fd8:	4014      	ands	r4, r2
 8000fda:	4461      	add	r1, ip
 8000fdc:	4a45      	ldr	r2, [pc, #276]	; (80010f4 <__aeabi_dmul+0x3a0>)
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	dd00      	ble.n	8000fe4 <__aeabi_dmul+0x290>
 8000fe2:	e726      	b.n	8000e32 <__aeabi_dmul+0xde>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	08ed      	lsrs	r5, r5, #3
 8000fe8:	0264      	lsls	r4, r4, #9
 8000fea:	0549      	lsls	r1, r1, #21
 8000fec:	4315      	orrs	r5, r2
 8000fee:	0b24      	lsrs	r4, r4, #12
 8000ff0:	0d4a      	lsrs	r2, r1, #21
 8000ff2:	e710      	b.n	8000e16 <__aeabi_dmul+0xc2>
 8000ff4:	4652      	mov	r2, sl
 8000ff6:	4332      	orrs	r2, r6
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dmul+0x2a8>
 8000ffa:	e07f      	b.n	80010fc <__aeabi_dmul+0x3a8>
 8000ffc:	2e00      	cmp	r6, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_dmul+0x2ae>
 8001000:	e0dc      	b.n	80011bc <__aeabi_dmul+0x468>
 8001002:	0030      	movs	r0, r6
 8001004:	f000 f9c0 	bl	8001388 <__clzsi2>
 8001008:	0002      	movs	r2, r0
 800100a:	3a0b      	subs	r2, #11
 800100c:	231d      	movs	r3, #29
 800100e:	0001      	movs	r1, r0
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	4652      	mov	r2, sl
 8001014:	3908      	subs	r1, #8
 8001016:	40da      	lsrs	r2, r3
 8001018:	408e      	lsls	r6, r1
 800101a:	4316      	orrs	r6, r2
 800101c:	4652      	mov	r2, sl
 800101e:	408a      	lsls	r2, r1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	4935      	ldr	r1, [pc, #212]	; (80010f8 <__aeabi_dmul+0x3a4>)
 8001024:	1a18      	subs	r0, r3, r0
 8001026:	0003      	movs	r3, r0
 8001028:	468c      	mov	ip, r1
 800102a:	4463      	add	r3, ip
 800102c:	2000      	movs	r0, #0
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	e6d3      	b.n	8000dda <__aeabi_dmul+0x86>
 8001032:	0025      	movs	r5, r4
 8001034:	4305      	orrs	r5, r0
 8001036:	d04a      	beq.n	80010ce <__aeabi_dmul+0x37a>
 8001038:	2c00      	cmp	r4, #0
 800103a:	d100      	bne.n	800103e <__aeabi_dmul+0x2ea>
 800103c:	e0b0      	b.n	80011a0 <__aeabi_dmul+0x44c>
 800103e:	0020      	movs	r0, r4
 8001040:	f000 f9a2 	bl	8001388 <__clzsi2>
 8001044:	0001      	movs	r1, r0
 8001046:	0002      	movs	r2, r0
 8001048:	390b      	subs	r1, #11
 800104a:	231d      	movs	r3, #29
 800104c:	0010      	movs	r0, r2
 800104e:	1a5b      	subs	r3, r3, r1
 8001050:	0031      	movs	r1, r6
 8001052:	0035      	movs	r5, r6
 8001054:	3808      	subs	r0, #8
 8001056:	4084      	lsls	r4, r0
 8001058:	40d9      	lsrs	r1, r3
 800105a:	4085      	lsls	r5, r0
 800105c:	430c      	orrs	r4, r1
 800105e:	4826      	ldr	r0, [pc, #152]	; (80010f8 <__aeabi_dmul+0x3a4>)
 8001060:	1a83      	subs	r3, r0, r2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	4699      	mov	r9, r3
 8001068:	469b      	mov	fp, r3
 800106a:	e697      	b.n	8000d9c <__aeabi_dmul+0x48>
 800106c:	0005      	movs	r5, r0
 800106e:	4325      	orrs	r5, r4
 8001070:	d126      	bne.n	80010c0 <__aeabi_dmul+0x36c>
 8001072:	2208      	movs	r2, #8
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	2400      	movs	r4, #0
 800107a:	4691      	mov	r9, r2
 800107c:	469b      	mov	fp, r3
 800107e:	e68d      	b.n	8000d9c <__aeabi_dmul+0x48>
 8001080:	4652      	mov	r2, sl
 8001082:	9b00      	ldr	r3, [sp, #0]
 8001084:	4332      	orrs	r2, r6
 8001086:	d110      	bne.n	80010aa <__aeabi_dmul+0x356>
 8001088:	4915      	ldr	r1, [pc, #84]	; (80010e0 <__aeabi_dmul+0x38c>)
 800108a:	2600      	movs	r6, #0
 800108c:	468c      	mov	ip, r1
 800108e:	4463      	add	r3, ip
 8001090:	4649      	mov	r1, r9
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	4319      	orrs	r1, r3
 8001098:	4689      	mov	r9, r1
 800109a:	2002      	movs	r0, #2
 800109c:	e69d      	b.n	8000dda <__aeabi_dmul+0x86>
 800109e:	465b      	mov	r3, fp
 80010a0:	9701      	str	r7, [sp, #4]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dmul+0x354>
 80010a6:	e6ad      	b.n	8000e04 <__aeabi_dmul+0xb0>
 80010a8:	e6c3      	b.n	8000e32 <__aeabi_dmul+0xde>
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <__aeabi_dmul+0x38c>)
 80010ac:	2003      	movs	r0, #3
 80010ae:	4694      	mov	ip, r2
 80010b0:	4463      	add	r3, ip
 80010b2:	464a      	mov	r2, r9
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2303      	movs	r3, #3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	4691      	mov	r9, r2
 80010bc:	4652      	mov	r2, sl
 80010be:	e68c      	b.n	8000dda <__aeabi_dmul+0x86>
 80010c0:	220c      	movs	r2, #12
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2303      	movs	r3, #3
 80010c6:	0005      	movs	r5, r0
 80010c8:	4691      	mov	r9, r2
 80010ca:	469b      	mov	fp, r3
 80010cc:	e666      	b.n	8000d9c <__aeabi_dmul+0x48>
 80010ce:	2304      	movs	r3, #4
 80010d0:	4699      	mov	r9, r3
 80010d2:	2300      	movs	r3, #0
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	2400      	movs	r4, #0
 80010da:	469b      	mov	fp, r3
 80010dc:	e65e      	b.n	8000d9c <__aeabi_dmul+0x48>
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	000007ff 	.word	0x000007ff
 80010e4:	fffffc01 	.word	0xfffffc01
 80010e8:	08005168 	.word	0x08005168
 80010ec:	000003ff 	.word	0x000003ff
 80010f0:	feffffff 	.word	0xfeffffff
 80010f4:	000007fe 	.word	0x000007fe
 80010f8:	fffffc0d 	.word	0xfffffc0d
 80010fc:	4649      	mov	r1, r9
 80010fe:	2301      	movs	r3, #1
 8001100:	4319      	orrs	r1, r3
 8001102:	4689      	mov	r9, r1
 8001104:	2600      	movs	r6, #0
 8001106:	2001      	movs	r0, #1
 8001108:	e667      	b.n	8000dda <__aeabi_dmul+0x86>
 800110a:	2300      	movs	r3, #0
 800110c:	2480      	movs	r4, #128	; 0x80
 800110e:	2500      	movs	r5, #0
 8001110:	4a43      	ldr	r2, [pc, #268]	; (8001220 <__aeabi_dmul+0x4cc>)
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	0324      	lsls	r4, r4, #12
 8001116:	e67e      	b.n	8000e16 <__aeabi_dmul+0xc2>
 8001118:	2001      	movs	r0, #1
 800111a:	1a40      	subs	r0, r0, r1
 800111c:	2838      	cmp	r0, #56	; 0x38
 800111e:	dd00      	ble.n	8001122 <__aeabi_dmul+0x3ce>
 8001120:	e676      	b.n	8000e10 <__aeabi_dmul+0xbc>
 8001122:	281f      	cmp	r0, #31
 8001124:	dd5b      	ble.n	80011de <__aeabi_dmul+0x48a>
 8001126:	221f      	movs	r2, #31
 8001128:	0023      	movs	r3, r4
 800112a:	4252      	negs	r2, r2
 800112c:	1a51      	subs	r1, r2, r1
 800112e:	40cb      	lsrs	r3, r1
 8001130:	0019      	movs	r1, r3
 8001132:	2820      	cmp	r0, #32
 8001134:	d003      	beq.n	800113e <__aeabi_dmul+0x3ea>
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <__aeabi_dmul+0x4d0>)
 8001138:	4462      	add	r2, ip
 800113a:	4094      	lsls	r4, r2
 800113c:	4325      	orrs	r5, r4
 800113e:	1e6a      	subs	r2, r5, #1
 8001140:	4195      	sbcs	r5, r2
 8001142:	002a      	movs	r2, r5
 8001144:	430a      	orrs	r2, r1
 8001146:	2107      	movs	r1, #7
 8001148:	000d      	movs	r5, r1
 800114a:	2400      	movs	r4, #0
 800114c:	4015      	ands	r5, r2
 800114e:	4211      	tst	r1, r2
 8001150:	d05b      	beq.n	800120a <__aeabi_dmul+0x4b6>
 8001152:	210f      	movs	r1, #15
 8001154:	2400      	movs	r4, #0
 8001156:	4011      	ands	r1, r2
 8001158:	2904      	cmp	r1, #4
 800115a:	d053      	beq.n	8001204 <__aeabi_dmul+0x4b0>
 800115c:	1d11      	adds	r1, r2, #4
 800115e:	4291      	cmp	r1, r2
 8001160:	4192      	sbcs	r2, r2
 8001162:	4252      	negs	r2, r2
 8001164:	18a4      	adds	r4, r4, r2
 8001166:	000a      	movs	r2, r1
 8001168:	0223      	lsls	r3, r4, #8
 800116a:	d54b      	bpl.n	8001204 <__aeabi_dmul+0x4b0>
 800116c:	2201      	movs	r2, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e650      	b.n	8000e16 <__aeabi_dmul+0xc2>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	031b      	lsls	r3, r3, #12
 8001178:	421c      	tst	r4, r3
 800117a:	d009      	beq.n	8001190 <__aeabi_dmul+0x43c>
 800117c:	421e      	tst	r6, r3
 800117e:	d107      	bne.n	8001190 <__aeabi_dmul+0x43c>
 8001180:	4333      	orrs	r3, r6
 8001182:	031c      	lsls	r4, r3, #12
 8001184:	4643      	mov	r3, r8
 8001186:	0015      	movs	r5, r2
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	4a25      	ldr	r2, [pc, #148]	; (8001220 <__aeabi_dmul+0x4cc>)
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	e642      	b.n	8000e16 <__aeabi_dmul+0xc2>
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	0312      	lsls	r2, r2, #12
 8001194:	4314      	orrs	r4, r2
 8001196:	0324      	lsls	r4, r4, #12
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <__aeabi_dmul+0x4cc>)
 800119a:	0b24      	lsrs	r4, r4, #12
 800119c:	9701      	str	r7, [sp, #4]
 800119e:	e63a      	b.n	8000e16 <__aeabi_dmul+0xc2>
 80011a0:	f000 f8f2 	bl	8001388 <__clzsi2>
 80011a4:	0001      	movs	r1, r0
 80011a6:	0002      	movs	r2, r0
 80011a8:	3115      	adds	r1, #21
 80011aa:	3220      	adds	r2, #32
 80011ac:	291c      	cmp	r1, #28
 80011ae:	dc00      	bgt.n	80011b2 <__aeabi_dmul+0x45e>
 80011b0:	e74b      	b.n	800104a <__aeabi_dmul+0x2f6>
 80011b2:	0034      	movs	r4, r6
 80011b4:	3808      	subs	r0, #8
 80011b6:	2500      	movs	r5, #0
 80011b8:	4084      	lsls	r4, r0
 80011ba:	e750      	b.n	800105e <__aeabi_dmul+0x30a>
 80011bc:	f000 f8e4 	bl	8001388 <__clzsi2>
 80011c0:	0003      	movs	r3, r0
 80011c2:	001a      	movs	r2, r3
 80011c4:	3215      	adds	r2, #21
 80011c6:	3020      	adds	r0, #32
 80011c8:	2a1c      	cmp	r2, #28
 80011ca:	dc00      	bgt.n	80011ce <__aeabi_dmul+0x47a>
 80011cc:	e71e      	b.n	800100c <__aeabi_dmul+0x2b8>
 80011ce:	4656      	mov	r6, sl
 80011d0:	3b08      	subs	r3, #8
 80011d2:	2200      	movs	r2, #0
 80011d4:	409e      	lsls	r6, r3
 80011d6:	e723      	b.n	8001020 <__aeabi_dmul+0x2cc>
 80011d8:	9b00      	ldr	r3, [sp, #0]
 80011da:	469c      	mov	ip, r3
 80011dc:	e6e6      	b.n	8000fac <__aeabi_dmul+0x258>
 80011de:	4912      	ldr	r1, [pc, #72]	; (8001228 <__aeabi_dmul+0x4d4>)
 80011e0:	0022      	movs	r2, r4
 80011e2:	4461      	add	r1, ip
 80011e4:	002e      	movs	r6, r5
 80011e6:	408d      	lsls	r5, r1
 80011e8:	408a      	lsls	r2, r1
 80011ea:	40c6      	lsrs	r6, r0
 80011ec:	1e69      	subs	r1, r5, #1
 80011ee:	418d      	sbcs	r5, r1
 80011f0:	4332      	orrs	r2, r6
 80011f2:	432a      	orrs	r2, r5
 80011f4:	40c4      	lsrs	r4, r0
 80011f6:	0753      	lsls	r3, r2, #29
 80011f8:	d0b6      	beq.n	8001168 <__aeabi_dmul+0x414>
 80011fa:	210f      	movs	r1, #15
 80011fc:	4011      	ands	r1, r2
 80011fe:	2904      	cmp	r1, #4
 8001200:	d1ac      	bne.n	800115c <__aeabi_dmul+0x408>
 8001202:	e7b1      	b.n	8001168 <__aeabi_dmul+0x414>
 8001204:	0765      	lsls	r5, r4, #29
 8001206:	0264      	lsls	r4, r4, #9
 8001208:	0b24      	lsrs	r4, r4, #12
 800120a:	08d2      	lsrs	r2, r2, #3
 800120c:	4315      	orrs	r5, r2
 800120e:	2200      	movs	r2, #0
 8001210:	e601      	b.n	8000e16 <__aeabi_dmul+0xc2>
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0312      	lsls	r2, r2, #12
 8001216:	4314      	orrs	r4, r2
 8001218:	0324      	lsls	r4, r4, #12
 800121a:	4a01      	ldr	r2, [pc, #4]	; (8001220 <__aeabi_dmul+0x4cc>)
 800121c:	0b24      	lsrs	r4, r4, #12
 800121e:	e5fa      	b.n	8000e16 <__aeabi_dmul+0xc2>
 8001220:	000007ff 	.word	0x000007ff
 8001224:	0000043e 	.word	0x0000043e
 8001228:	0000041e 	.word	0x0000041e

0800122c <__aeabi_d2iz>:
 800122c:	000a      	movs	r2, r1
 800122e:	b530      	push	{r4, r5, lr}
 8001230:	4c13      	ldr	r4, [pc, #76]	; (8001280 <__aeabi_d2iz+0x54>)
 8001232:	0053      	lsls	r3, r2, #1
 8001234:	0309      	lsls	r1, r1, #12
 8001236:	0005      	movs	r5, r0
 8001238:	0b09      	lsrs	r1, r1, #12
 800123a:	2000      	movs	r0, #0
 800123c:	0d5b      	lsrs	r3, r3, #21
 800123e:	0fd2      	lsrs	r2, r2, #31
 8001240:	42a3      	cmp	r3, r4
 8001242:	dd04      	ble.n	800124e <__aeabi_d2iz+0x22>
 8001244:	480f      	ldr	r0, [pc, #60]	; (8001284 <__aeabi_d2iz+0x58>)
 8001246:	4283      	cmp	r3, r0
 8001248:	dd02      	ble.n	8001250 <__aeabi_d2iz+0x24>
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <__aeabi_d2iz+0x5c>)
 800124c:	18d0      	adds	r0, r2, r3
 800124e:	bd30      	pop	{r4, r5, pc}
 8001250:	2080      	movs	r0, #128	; 0x80
 8001252:	0340      	lsls	r0, r0, #13
 8001254:	4301      	orrs	r1, r0
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <__aeabi_d2iz+0x60>)
 8001258:	1ac0      	subs	r0, r0, r3
 800125a:	281f      	cmp	r0, #31
 800125c:	dd08      	ble.n	8001270 <__aeabi_d2iz+0x44>
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <__aeabi_d2iz+0x64>)
 8001260:	1ac3      	subs	r3, r0, r3
 8001262:	40d9      	lsrs	r1, r3
 8001264:	000b      	movs	r3, r1
 8001266:	4258      	negs	r0, r3
 8001268:	2a00      	cmp	r2, #0
 800126a:	d1f0      	bne.n	800124e <__aeabi_d2iz+0x22>
 800126c:	0018      	movs	r0, r3
 800126e:	e7ee      	b.n	800124e <__aeabi_d2iz+0x22>
 8001270:	4c08      	ldr	r4, [pc, #32]	; (8001294 <__aeabi_d2iz+0x68>)
 8001272:	40c5      	lsrs	r5, r0
 8001274:	46a4      	mov	ip, r4
 8001276:	4463      	add	r3, ip
 8001278:	4099      	lsls	r1, r3
 800127a:	000b      	movs	r3, r1
 800127c:	432b      	orrs	r3, r5
 800127e:	e7f2      	b.n	8001266 <__aeabi_d2iz+0x3a>
 8001280:	000003fe 	.word	0x000003fe
 8001284:	0000041d 	.word	0x0000041d
 8001288:	7fffffff 	.word	0x7fffffff
 800128c:	00000433 	.word	0x00000433
 8001290:	00000413 	.word	0x00000413
 8001294:	fffffbed 	.word	0xfffffbed

08001298 <__aeabi_i2d>:
 8001298:	b570      	push	{r4, r5, r6, lr}
 800129a:	2800      	cmp	r0, #0
 800129c:	d016      	beq.n	80012cc <__aeabi_i2d+0x34>
 800129e:	17c3      	asrs	r3, r0, #31
 80012a0:	18c5      	adds	r5, r0, r3
 80012a2:	405d      	eors	r5, r3
 80012a4:	0fc4      	lsrs	r4, r0, #31
 80012a6:	0028      	movs	r0, r5
 80012a8:	f000 f86e 	bl	8001388 <__clzsi2>
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <__aeabi_i2d+0x5c>)
 80012ae:	1a12      	subs	r2, r2, r0
 80012b0:	280a      	cmp	r0, #10
 80012b2:	dc16      	bgt.n	80012e2 <__aeabi_i2d+0x4a>
 80012b4:	0003      	movs	r3, r0
 80012b6:	002e      	movs	r6, r5
 80012b8:	3315      	adds	r3, #21
 80012ba:	409e      	lsls	r6, r3
 80012bc:	230b      	movs	r3, #11
 80012be:	1a18      	subs	r0, r3, r0
 80012c0:	40c5      	lsrs	r5, r0
 80012c2:	0552      	lsls	r2, r2, #21
 80012c4:	032d      	lsls	r5, r5, #12
 80012c6:	0b2d      	lsrs	r5, r5, #12
 80012c8:	0d53      	lsrs	r3, r2, #21
 80012ca:	e003      	b.n	80012d4 <__aeabi_i2d+0x3c>
 80012cc:	2400      	movs	r4, #0
 80012ce:	2300      	movs	r3, #0
 80012d0:	2500      	movs	r5, #0
 80012d2:	2600      	movs	r6, #0
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	432b      	orrs	r3, r5
 80012d8:	07e4      	lsls	r4, r4, #31
 80012da:	4323      	orrs	r3, r4
 80012dc:	0030      	movs	r0, r6
 80012de:	0019      	movs	r1, r3
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
 80012e2:	380b      	subs	r0, #11
 80012e4:	4085      	lsls	r5, r0
 80012e6:	0552      	lsls	r2, r2, #21
 80012e8:	032d      	lsls	r5, r5, #12
 80012ea:	2600      	movs	r6, #0
 80012ec:	0b2d      	lsrs	r5, r5, #12
 80012ee:	0d53      	lsrs	r3, r2, #21
 80012f0:	e7f0      	b.n	80012d4 <__aeabi_i2d+0x3c>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	0000041e 	.word	0x0000041e

080012f8 <__aeabi_f2d>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	0043      	lsls	r3, r0, #1
 80012fc:	0246      	lsls	r6, r0, #9
 80012fe:	0fc4      	lsrs	r4, r0, #31
 8001300:	20fe      	movs	r0, #254	; 0xfe
 8001302:	0e1b      	lsrs	r3, r3, #24
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	0a75      	lsrs	r5, r6, #9
 8001308:	4208      	tst	r0, r1
 800130a:	d00c      	beq.n	8001326 <__aeabi_f2d+0x2e>
 800130c:	22e0      	movs	r2, #224	; 0xe0
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4694      	mov	ip, r2
 8001312:	076d      	lsls	r5, r5, #29
 8001314:	0b36      	lsrs	r6, r6, #12
 8001316:	4463      	add	r3, ip
 8001318:	051b      	lsls	r3, r3, #20
 800131a:	4333      	orrs	r3, r6
 800131c:	07e4      	lsls	r4, r4, #31
 800131e:	4323      	orrs	r3, r4
 8001320:	0028      	movs	r0, r5
 8001322:	0019      	movs	r1, r3
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	2b00      	cmp	r3, #0
 8001328:	d114      	bne.n	8001354 <__aeabi_f2d+0x5c>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d01b      	beq.n	8001366 <__aeabi_f2d+0x6e>
 800132e:	0028      	movs	r0, r5
 8001330:	f000 f82a 	bl	8001388 <__clzsi2>
 8001334:	280a      	cmp	r0, #10
 8001336:	dc1c      	bgt.n	8001372 <__aeabi_f2d+0x7a>
 8001338:	230b      	movs	r3, #11
 800133a:	002e      	movs	r6, r5
 800133c:	1a1b      	subs	r3, r3, r0
 800133e:	40de      	lsrs	r6, r3
 8001340:	0003      	movs	r3, r0
 8001342:	3315      	adds	r3, #21
 8001344:	409d      	lsls	r5, r3
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <__aeabi_f2d+0x88>)
 8001348:	0336      	lsls	r6, r6, #12
 800134a:	1a12      	subs	r2, r2, r0
 800134c:	0552      	lsls	r2, r2, #21
 800134e:	0b36      	lsrs	r6, r6, #12
 8001350:	0d53      	lsrs	r3, r2, #21
 8001352:	e7e1      	b.n	8001318 <__aeabi_f2d+0x20>
 8001354:	2d00      	cmp	r5, #0
 8001356:	d009      	beq.n	800136c <__aeabi_f2d+0x74>
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	0b36      	lsrs	r6, r6, #12
 800135c:	0312      	lsls	r2, r2, #12
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <__aeabi_f2d+0x8c>)
 8001360:	076d      	lsls	r5, r5, #29
 8001362:	4316      	orrs	r6, r2
 8001364:	e7d8      	b.n	8001318 <__aeabi_f2d+0x20>
 8001366:	2300      	movs	r3, #0
 8001368:	2600      	movs	r6, #0
 800136a:	e7d5      	b.n	8001318 <__aeabi_f2d+0x20>
 800136c:	2600      	movs	r6, #0
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <__aeabi_f2d+0x8c>)
 8001370:	e7d2      	b.n	8001318 <__aeabi_f2d+0x20>
 8001372:	0003      	movs	r3, r0
 8001374:	3b0b      	subs	r3, #11
 8001376:	409d      	lsls	r5, r3
 8001378:	002e      	movs	r6, r5
 800137a:	2500      	movs	r5, #0
 800137c:	e7e3      	b.n	8001346 <__aeabi_f2d+0x4e>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	00000389 	.word	0x00000389
 8001384:	000007ff 	.word	0x000007ff

08001388 <__clzsi2>:
 8001388:	211c      	movs	r1, #28
 800138a:	2301      	movs	r3, #1
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	4298      	cmp	r0, r3
 8001390:	d301      	bcc.n	8001396 <__clzsi2+0xe>
 8001392:	0c00      	lsrs	r0, r0, #16
 8001394:	3910      	subs	r1, #16
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	4298      	cmp	r0, r3
 800139a:	d301      	bcc.n	80013a0 <__clzsi2+0x18>
 800139c:	0a00      	lsrs	r0, r0, #8
 800139e:	3908      	subs	r1, #8
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	4298      	cmp	r0, r3
 80013a4:	d301      	bcc.n	80013aa <__clzsi2+0x22>
 80013a6:	0900      	lsrs	r0, r0, #4
 80013a8:	3904      	subs	r1, #4
 80013aa:	a202      	add	r2, pc, #8	; (adr r2, 80013b4 <__clzsi2+0x2c>)
 80013ac:	5c10      	ldrb	r0, [r2, r0]
 80013ae:	1840      	adds	r0, r0, r1
 80013b0:	4770      	bx	lr
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	02020304 	.word	0x02020304
 80013b8:	01010101 	.word	0x01010101
	...

080013c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	2414      	movs	r4, #20
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	0018      	movs	r0, r3
 80013d0:	2314      	movs	r3, #20
 80013d2:	001a      	movs	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	f003 fe81 	bl	80050dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <MX_GPIO_Init+0x11c>)
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <MX_GPIO_Init+0x11c>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0309      	lsls	r1, r1, #12
 80013e4:	430a      	orrs	r2, r1
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_GPIO_Init+0x11c>)
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_GPIO_Init+0x11c>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x11c>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	03c9      	lsls	r1, r1, #15
 8001400:	430a      	orrs	r2, r1
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_GPIO_Init+0x11c>)
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	03db      	lsls	r3, r3, #15
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_GPIO_Init+0x11c>)
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <MX_GPIO_Init+0x11c>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	0289      	lsls	r1, r1, #10
 800141c:	430a      	orrs	r2, r1
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_GPIO_Init+0x11c>)
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_GPIO_Init+0x11c>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_GPIO_Init+0x11c>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	02c9      	lsls	r1, r1, #11
 8001438:	430a      	orrs	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <MX_GPIO_Init+0x11c>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	02db      	lsls	r3, r3, #11
 8001444:	4013      	ands	r3, r2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800144a:	2390      	movs	r3, #144	; 0x90
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	0018      	movs	r0, r3
 8001454:	f000 fe74 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4821      	ldr	r0, [pc, #132]	; (80014e4 <MX_GPIO_Init+0x120>)
 800145e:	2200      	movs	r2, #0
 8001460:	0019      	movs	r1, r3
 8001462:	f000 fe6d 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001466:	193b      	adds	r3, r7, r4
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	0192      	lsls	r2, r2, #6
 800146c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	193b      	adds	r3, r7, r4
 8001470:	2284      	movs	r2, #132	; 0x84
 8001472:	0392      	lsls	r2, r2, #14
 8001474:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147c:	193b      	adds	r3, r7, r4
 800147e:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <MX_GPIO_Init+0x124>)
 8001480:	0019      	movs	r1, r3
 8001482:	0010      	movs	r0, r2
 8001484:	f000 fce4 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001488:	193b      	adds	r3, r7, r4
 800148a:	2220      	movs	r2, #32
 800148c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2201      	movs	r2, #1
 8001492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a0:	193a      	adds	r2, r7, r4
 80014a2:	2390      	movs	r3, #144	; 0x90
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fcd1 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ae:	0021      	movs	r1, r4
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	0052      	lsls	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2201      	movs	r2, #1
 80014bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <MX_GPIO_Init+0x120>)
 80014ce:	0019      	movs	r1, r3
 80014d0:	0010      	movs	r0, r2
 80014d2:	f000 fcbd 	bl	8001e50 <HAL_GPIO_Init>

}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b00b      	add	sp, #44	; 0x2c
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000400 	.word	0x48000400
 80014e8:	48000800 	.word	0x48000800

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 fb95 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f88d 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f7ff ff63 	bl	80013c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fe:	f000 fae9 	bl	8001ad4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001502:	f000 f8df 	bl	80016c4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001506:	f000 f9cd 	bl	80018a4 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <main+0x108>)
 800150c:	2100      	movs	r1, #0
 800150e:	0018      	movs	r0, r3
 8001510:	f002 fbdc 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_SPI_Init(&hspi1);
 8001514:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <main+0x10c>)
 8001516:	0018      	movs	r0, r3
 8001518:	f001 fc2e 	bl	8002d78 <HAL_SPI_Init>
  /* USER CODE BEGIN 2 */

  //configuration code for using MCP 3004 CH1
  uint8_t const MOPI[3] = {0b00000001, 0b10010000, 0b00000000};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4a37      	ldr	r2, [pc, #220]	; (80015fc <main+0x110>)
 8001520:	8811      	ldrh	r1, [r2, #0]
 8001522:	8019      	strh	r1, [r3, #0]
 8001524:	7892      	ldrb	r2, [r2, #2]
 8001526:	709a      	strb	r2, [r3, #2]
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  //use chip select bring it low
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//0 means selected/ON
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4834      	ldr	r0, [pc, #208]	; (8001600 <main+0x114>)
 800152e:	2200      	movs	r2, #0
 8001530:	0019      	movs	r1, r3
 8001532:	f000 fe05 	bl	8002140 <HAL_GPIO_WritePin>
	  //configure code send from board to ADC
	  HAL_SPI_Transmit(&hspi1, MOPI, 3, 20);
 8001536:	1d39      	adds	r1, r7, #4
 8001538:	482f      	ldr	r0, [pc, #188]	; (80015f8 <main+0x10c>)
 800153a:	2314      	movs	r3, #20
 800153c:	2203      	movs	r2, #3
 800153e:	f001 fcd3 	bl	8002ee8 <HAL_SPI_Transmit>
	  //data received from ADC to board
	  HAL_SPI_Receive(&hspi1, MIPO, 3, 20);
 8001542:	0039      	movs	r1, r7
 8001544:	482c      	ldr	r0, [pc, #176]	; (80015f8 <main+0x10c>)
 8001546:	2314      	movs	r3, #20
 8001548:	2203      	movs	r2, #3
 800154a:	f001 fe25 	bl	8003198 <HAL_SPI_Receive>

	  //use chip select bring it high
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);// 1 means OFF
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	482b      	ldr	r0, [pc, #172]	; (8001600 <main+0x114>)
 8001554:	2201      	movs	r2, #1
 8001556:	0019      	movs	r1, r3
 8001558:	f000 fdf2 	bl	8002140 <HAL_GPIO_WritePin>

	  //Calculation Part
	  //get ADC value
	  MIPO[1] &= 5; //get last two bits
 800155c:	003b      	movs	r3, r7
 800155e:	785b      	ldrb	r3, [r3, #1]
 8001560:	2205      	movs	r2, #5
 8001562:	4013      	ands	r3, r2
 8001564:	b2da      	uxtb	r2, r3
 8001566:	003b      	movs	r3, r7
 8001568:	705a      	strb	r2, [r3, #1]
	  int ADC_Value = MIPO[1];
 800156a:	003b      	movs	r3, r7
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	617b      	str	r3, [r7, #20]
	  ADC_Value = (ADC_Value << 8) | MIPO[0];
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	003a      	movs	r2, r7
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

	  //get the duty cycle for PWM
	  float duty_cycle = ADC_Value / 1023;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4921      	ldr	r1, [pc, #132]	; (8001604 <main+0x118>)
 8001580:	0018      	movs	r0, r3
 8001582:	f7fe fe4b 	bl	800021c <__divsi3>
 8001586:	0003      	movs	r3, r0
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff f859 	bl	8000640 <__aeabi_i2f>
 800158e:	1c03      	adds	r3, r0, #0
 8001590:	613b      	str	r3, [r7, #16]
	  int const CLK_Count = 600000;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <main+0x11c>)
 8001594:	60fb      	str	r3, [r7, #12]
	  int pulse_width = duty_cycle * CLK_Count * 0.05 + CLK_Count * 0.05;
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff f852 	bl	8000640 <__aeabi_i2f>
 800159c:	1c03      	adds	r3, r0, #0
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	1c18      	adds	r0, r3, #0
 80015a2:	f7fe ff27 	bl	80003f4 <__aeabi_fmul>
 80015a6:	1c03      	adds	r3, r0, #0
 80015a8:	1c18      	adds	r0, r3, #0
 80015aa:	f7ff fea5 	bl	80012f8 <__aeabi_f2d>
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <main+0x120>)
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <main+0x124>)
 80015b2:	f7ff fbcf 	bl	8000d54 <__aeabi_dmul>
 80015b6:	0002      	movs	r2, r0
 80015b8:	000b      	movs	r3, r1
 80015ba:	0014      	movs	r4, r2
 80015bc:	001d      	movs	r5, r3
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff fe6a 	bl	8001298 <__aeabi_i2d>
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <main+0x120>)
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <main+0x124>)
 80015c8:	f7ff fbc4 	bl	8000d54 <__aeabi_dmul>
 80015cc:	0002      	movs	r2, r0
 80015ce:	000b      	movs	r3, r1
 80015d0:	0020      	movs	r0, r4
 80015d2:	0029      	movs	r1, r5
 80015d4:	f7ff f882 	bl	80006dc <__aeabi_dadd>
 80015d8:	0002      	movs	r2, r0
 80015da:	000b      	movs	r3, r1
 80015dc:	0010      	movs	r0, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	f7ff fe24 	bl	800122c <__aeabi_d2iz>
 80015e4:	0003      	movs	r3, r0
 80015e6:	60bb      	str	r3, [r7, #8]
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pulse_width);
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <main+0x108>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
  {
 80015f0:	e79a      	b.n	8001528 <main+0x3c>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	2000008c 	.word	0x2000008c
 80015f8:	20000028 	.word	0x20000028
 80015fc:	08005104 	.word	0x08005104
 8001600:	48000400 	.word	0x48000400
 8001604:	000003ff 	.word	0x000003ff
 8001608:	000927c0 	.word	0x000927c0
 800160c:	9999999a 	.word	0x9999999a
 8001610:	3fa99999 	.word	0x3fa99999

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b099      	sub	sp, #100	; 0x64
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	242c      	movs	r4, #44	; 0x2c
 800161c:	193b      	adds	r3, r7, r4
 800161e:	0018      	movs	r0, r3
 8001620:	2334      	movs	r3, #52	; 0x34
 8001622:	001a      	movs	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f003 fd59 	bl	80050dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162a:	231c      	movs	r3, #28
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	0018      	movs	r0, r3
 8001630:	2310      	movs	r3, #16
 8001632:	001a      	movs	r2, r3
 8001634:	2100      	movs	r1, #0
 8001636:	f003 fd51 	bl	80050dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163a:	003b      	movs	r3, r7
 800163c:	0018      	movs	r0, r3
 800163e:	231c      	movs	r3, #28
 8001640:	001a      	movs	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	f003 fd4a 	bl	80050dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001648:	193b      	adds	r3, r7, r4
 800164a:	2220      	movs	r2, #32
 800164c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800164e:	193b      	adds	r3, r7, r4
 8001650:	2201      	movs	r2, #1
 8001652:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001654:	193b      	adds	r3, r7, r4
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165a:	193b      	adds	r3, r7, r4
 800165c:	0018      	movs	r0, r3
 800165e:	f000 fd8d 	bl	800217c <HAL_RCC_OscConfig>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001666:	f000 f828 	bl	80016ba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	211c      	movs	r1, #28
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2207      	movs	r2, #7
 8001670:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2203      	movs	r2, #3
 8001676:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2101      	movs	r1, #1
 8001688:	0018      	movs	r0, r3
 800168a:	f001 f8fd 	bl	8002888 <HAL_RCC_ClockConfig>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001692:	f000 f812 	bl	80016ba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001696:	003b      	movs	r3, r7
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169c:	003b      	movs	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a2:	003b      	movs	r3, r7
 80016a4:	0018      	movs	r0, r3
 80016a6:	f001 fa69 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016ae:	f000 f804 	bl	80016ba <Error_Handler>
  }
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b019      	add	sp, #100	; 0x64
 80016b8:	bd90      	pop	{r4, r7, pc}

080016ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016be:	b672      	cpsid	i
}
 80016c0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <Error_Handler+0x8>

080016c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_SPI1_Init+0x78>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d0:	2282      	movs	r2, #130	; 0x82
 80016d2:	0052      	lsls	r2, r2, #1
 80016d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI1_Init+0x74>)
 80016de:	22c0      	movs	r2, #192	; 0xc0
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI1_Init+0x74>)
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI1_Init+0x74>)
 80016fa:	2208      	movs	r2, #8
 80016fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI1_Init+0x74>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI1_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI1_Init+0x74>)
 800171e:	2208      	movs	r2, #8
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <MX_SPI1_Init+0x74>)
 8001724:	0018      	movs	r0, r3
 8001726:	f001 fb27 	bl	8002d78 <HAL_SPI_Init>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800172e:	f7ff ffc4 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000028 	.word	0x20000028
 800173c:	40013000 	.word	0x40013000

08001740 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	2414      	movs	r4, #20
 800174a:	193b      	adds	r3, r7, r4
 800174c:	0018      	movs	r0, r3
 800174e:	2314      	movs	r3, #20
 8001750:	001a      	movs	r2, r3
 8001752:	2100      	movs	r1, #0
 8001754:	f003 fcc2 	bl	80050dc <memset>
  if(spiHandle->Instance==SPI1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <HAL_SPI_MspInit+0xd8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d155      	bne.n	800180e <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_SPI_MspInit+0xdc>)
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_SPI_MspInit+0xdc>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0149      	lsls	r1, r1, #5
 800176c:	430a      	orrs	r2, r1
 800176e:	619a      	str	r2, [r3, #24]
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_SPI_MspInit+0xdc>)
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	015b      	lsls	r3, r3, #5
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_SPI_MspInit+0xdc>)
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_SPI_MspInit+0xdc>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0289      	lsls	r1, r1, #10
 8001788:	430a      	orrs	r2, r1
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_SPI_MspInit+0xdc>)
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_SPI_MspInit+0xdc>)
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HAL_SPI_MspInit+0xdc>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	02c9      	lsls	r1, r1, #11
 80017a4:	430a      	orrs	r2, r1
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_SPI_MspInit+0xdc>)
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	02db      	lsls	r3, r3, #11
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	22c0      	movs	r2, #192	; 0xc0
 80017ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	2202      	movs	r2, #2
 80017c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	2203      	movs	r2, #3
 80017cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	193a      	adds	r2, r7, r4
 80017d6:	2390      	movs	r3, #144	; 0x90
 80017d8:	05db      	lsls	r3, r3, #23
 80017da:	0011      	movs	r1, r2
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 fb37 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017e2:	0021      	movs	r1, r4
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2208      	movs	r2, #8
 80017e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2202      	movs	r2, #2
 80017ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2203      	movs	r2, #3
 80017fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	187b      	adds	r3, r7, r1
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_SPI_MspInit+0xe0>)
 8001806:	0019      	movs	r1, r3
 8001808:	0010      	movs	r0, r2
 800180a:	f000 fb21 	bl	8001e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b00b      	add	sp, #44	; 0x2c
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	40013000 	.word	0x40013000
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x44>)
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_MspInit+0x44>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	619a      	str	r2, [r3, #24]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x44>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x44>)
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_MspInit+0x44>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	0549      	lsls	r1, r1, #21
 800184c:	430a      	orrs	r2, r1
 800184e:	61da      	str	r2, [r3, #28]
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_MspInit+0x44>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	055b      	lsls	r3, r3, #21
 8001858:	4013      	ands	r3, r2
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 fa0e 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b096      	sub	sp, #88	; 0x58
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	2348      	movs	r3, #72	; 0x48
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	0018      	movs	r0, r3
 80018b0:	2310      	movs	r3, #16
 80018b2:	001a      	movs	r2, r3
 80018b4:	2100      	movs	r1, #0
 80018b6:	f003 fc11 	bl	80050dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ba:	2340      	movs	r3, #64	; 0x40
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	0018      	movs	r0, r3
 80018c0:	2308      	movs	r3, #8
 80018c2:	001a      	movs	r2, r3
 80018c4:	2100      	movs	r1, #0
 80018c6:	f003 fc09 	bl	80050dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ca:	2324      	movs	r3, #36	; 0x24
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	0018      	movs	r0, r3
 80018d0:	231c      	movs	r3, #28
 80018d2:	001a      	movs	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	f003 fc01 	bl	80050dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	0018      	movs	r0, r3
 80018de:	2320      	movs	r3, #32
 80018e0:	001a      	movs	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	f003 fbfa 	bl	80050dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e8:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <MX_TIM1_Init+0x160>)
 80018ea:	4a47      	ldr	r2, [pc, #284]	; (8001a08 <MX_TIM1_Init+0x164>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80018ee:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <MX_TIM1_Init+0x160>)
 80018f0:	220f      	movs	r2, #15
 80018f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <MX_TIM1_Init+0x160>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60001;
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <MX_TIM1_Init+0x160>)
 80018fc:	4a43      	ldr	r2, [pc, #268]	; (8001a0c <MX_TIM1_Init+0x168>)
 80018fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <MX_TIM1_Init+0x160>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <MX_TIM1_Init+0x160>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <MX_TIM1_Init+0x160>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <MX_TIM1_Init+0x160>)
 8001914:	0018      	movs	r0, r3
 8001916:	f002 f931 	bl	8003b7c <HAL_TIM_Base_Init>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800191e:	f7ff fecc 	bl	80016ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001922:	2148      	movs	r1, #72	; 0x48
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	0152      	lsls	r2, r2, #5
 800192a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800192c:	187a      	adds	r2, r7, r1
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <MX_TIM1_Init+0x160>)
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f002 fb48 	bl	8003fc8 <HAL_TIM_ConfigClockSource>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800193c:	f7ff febd 	bl	80016ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <MX_TIM1_Init+0x160>)
 8001942:	0018      	movs	r0, r3
 8001944:	f002 f96a 	bl	8003c1c <HAL_TIM_PWM_Init>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800194c:	f7ff feb5 	bl	80016ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2140      	movs	r1, #64	; 0x40
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800195e:	187a      	adds	r2, r7, r1
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <MX_TIM1_Init+0x160>)
 8001962:	0011      	movs	r1, r2
 8001964:	0018      	movs	r0, r3
 8001966:	f002 ff3d 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800196e:	f7ff fea4 	bl	80016ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001972:	2124      	movs	r1, #36	; 0x24
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2260      	movs	r2, #96	; 0x60
 8001978:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 4200;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <MX_TIM1_Init+0x16c>)
 800197e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	1879      	adds	r1, r7, r1
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_TIM1_Init+0x160>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	0018      	movs	r0, r3
 80019a6:	f002 fa49 	bl	8003e3c <HAL_TIM_PWM_ConfigChannel>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80019ae:	f7ff fe84 	bl	80016ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	0192      	lsls	r2, r2, #6
 80019d6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019de:	1d3a      	adds	r2, r7, #4
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_TIM1_Init+0x160>)
 80019e2:	0011      	movs	r1, r2
 80019e4:	0018      	movs	r0, r3
 80019e6:	f002 ff5b 	bl	80048a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80019ee:	f7ff fe64 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <MX_TIM1_Init+0x160>)
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 f82d 	bl	8001a54 <HAL_TIM_MspPostInit>

}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b016      	add	sp, #88	; 0x58
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	2000008c 	.word	0x2000008c
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	0000ea61 	.word	0x0000ea61
 8001a10:	00001068 	.word	0x00001068

08001a14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_TIM_Base_MspInit+0x38>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10d      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_TIM_Base_MspInit+0x3c>)
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_TIM_Base_MspInit+0x3c>)
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	0109      	lsls	r1, r1, #4
 8001a30:	430a      	orrs	r2, r1
 8001a32:	619a      	str	r2, [r3, #24]
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_TIM_Base_MspInit+0x3c>)
 8001a36:	699a      	ldr	r2, [r3, #24]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	40012c00 	.word	0x40012c00
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	240c      	movs	r4, #12
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	0018      	movs	r0, r3
 8001a62:	2314      	movs	r3, #20
 8001a64:	001a      	movs	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	f003 fb38 	bl	80050dc <memset>
  if(timHandle->Instance==TIM1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <HAL_TIM_MspPostInit+0x78>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d125      	bne.n	8001ac2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_TIM_MspPostInit+0x7c>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_TIM_MspPostInit+0x7c>)
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	0289      	lsls	r1, r1, #10
 8001a80:	430a      	orrs	r2, r1
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_TIM_MspPostInit+0x7c>)
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	0052      	lsls	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	187a      	adds	r2, r7, r1
 8001ab6:	2390      	movs	r3, #144	; 0x90
 8001ab8:	05db      	lsls	r3, r3, #23
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 f9c7 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b009      	add	sp, #36	; 0x24
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <MX_USART2_UART_Init+0x5c>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001ae0:	2296      	movs	r2, #150	; 0x96
 8001ae2:	0212      	lsls	r2, r2, #8
 8001ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f002 ff1f 	bl	800495c <HAL_UART_Init>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b22:	f7ff fdca 	bl	80016ba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000d4 	.word	0x200000d4
 8001b30:	40004400 	.word	0x40004400

08001b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	2414      	movs	r4, #20
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	0018      	movs	r0, r3
 8001b42:	2314      	movs	r3, #20
 8001b44:	001a      	movs	r2, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	f003 fac8 	bl	80050dc <memset>
  if(uartHandle->Instance==USART2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_UART_MspInit+0x90>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d132      	bne.n	8001bbc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_UART_MspInit+0x94>)
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_UART_MspInit+0x94>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0289      	lsls	r1, r1, #10
 8001b60:	430a      	orrs	r2, r1
 8001b62:	61da      	str	r2, [r3, #28]
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_UART_MspInit+0x94>)
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0x94>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0x94>)
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	0289      	lsls	r1, r1, #10
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_UART_MspInit+0x94>)
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b8e:	0021      	movs	r1, r4
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2202      	movs	r2, #2
 8001b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2201      	movs	r2, #1
 8001bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	187a      	adds	r2, r7, r1
 8001bb0:	2390      	movs	r3, #144	; 0x90
 8001bb2:	05db      	lsls	r3, r3, #23
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f94a 	bl	8001e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b00b      	add	sp, #44	; 0x2c
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40021000 	.word	0x40021000

08001bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd2:	490e      	ldr	r1, [pc, #56]	; (8001c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <LoopForever+0xe>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be8:	4c0b      	ldr	r4, [pc, #44]	; (8001c18 <LoopForever+0x16>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bf6:	f7ff fe50 	bl	800189a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bfa:	f003 fa4b 	bl	8005094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7ff fc75 	bl	80014ec <main>

08001c02 <LoopForever>:

LoopForever:
    b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   r0, =_estack
 8001c04:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c10:	080051c8 	.word	0x080051c8
  ldr r2, =_sbss
 8001c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c18:	2000015c 	.word	0x2000015c

08001c1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_COMP_IRQHandler>
	...

08001c20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_Init+0x24>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_Init+0x24>)
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 f809 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c36:	f7ff fdf5 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c52:	681c      	ldr	r4, [r3, #0]
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_InitTick+0x60>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	0019      	movs	r1, r3
 8001c5a:	23fa      	movs	r3, #250	; 0xfa
 8001c5c:	0098      	lsls	r0, r3, #2
 8001c5e:	f7fe fa53 	bl	8000108 <__udivsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	0019      	movs	r1, r3
 8001c66:	0020      	movs	r0, r4
 8001c68:	f7fe fa4e 	bl	8000108 <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 f8e1 	bl	8001e36 <HAL_SYSTICK_Config>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e00f      	b.n	8001c9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d80b      	bhi.n	8001c9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	2301      	movs	r3, #1
 8001c86:	425b      	negs	r3, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f8be 	bl	8001e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_InitTick+0x64>)
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b003      	add	sp, #12
 8001ca2:	bd90      	pop	{r4, r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_IncTick+0x1c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	001a      	movs	r2, r3
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	18d2      	adds	r2, r2, r3
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cc2:	601a      	str	r2, [r3, #0]
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000158 	.word	0x20000158

08001cd4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_GetTick+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000158 	.word	0x20000158

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	0002      	movs	r2, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfc:	d828      	bhi.n	8001d50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <__NVIC_SetPriority+0xd4>)
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	33c0      	adds	r3, #192	; 0xc0
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	589b      	ldr	r3, [r3, r2]
 8001d0e:	1dfa      	adds	r2, r7, #7
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	0011      	movs	r1, r2
 8001d14:	2203      	movs	r2, #3
 8001d16:	400a      	ands	r2, r1
 8001d18:	00d2      	lsls	r2, r2, #3
 8001d1a:	21ff      	movs	r1, #255	; 0xff
 8001d1c:	4091      	lsls	r1, r2
 8001d1e:	000a      	movs	r2, r1
 8001d20:	43d2      	mvns	r2, r2
 8001d22:	401a      	ands	r2, r3
 8001d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	2303      	movs	r3, #3
 8001d36:	4003      	ands	r3, r0
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d3c:	481f      	ldr	r0, [pc, #124]	; (8001dbc <__NVIC_SetPriority+0xd4>)
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	430a      	orrs	r2, r1
 8001d48:	33c0      	adds	r3, #192	; 0xc0
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d4e:	e031      	b.n	8001db4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <__NVIC_SetPriority+0xd8>)
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	0019      	movs	r1, r3
 8001d58:	230f      	movs	r3, #15
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	3b08      	subs	r3, #8
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3306      	adds	r3, #6
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	18d3      	adds	r3, r2, r3
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1dfa      	adds	r2, r7, #7
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	2203      	movs	r2, #3
 8001d72:	400a      	ands	r2, r1
 8001d74:	00d2      	lsls	r2, r2, #3
 8001d76:	21ff      	movs	r1, #255	; 0xff
 8001d78:	4091      	lsls	r1, r2
 8001d7a:	000a      	movs	r2, r1
 8001d7c:	43d2      	mvns	r2, r2
 8001d7e:	401a      	ands	r2, r3
 8001d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	401a      	ands	r2, r3
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	2303      	movs	r3, #3
 8001d92:	4003      	ands	r3, r0
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <__NVIC_SetPriority+0xd8>)
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	001c      	movs	r4, r3
 8001da0:	230f      	movs	r3, #15
 8001da2:	4023      	ands	r3, r4
 8001da4:	3b08      	subs	r3, #8
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	430a      	orrs	r2, r1
 8001daa:	3306      	adds	r3, #6
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	18c3      	adds	r3, r0, r3
 8001db0:	3304      	adds	r3, #4
 8001db2:	601a      	str	r2, [r3, #0]
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b003      	add	sp, #12
 8001dba:	bd90      	pop	{r4, r7, pc}
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	045b      	lsls	r3, r3, #17
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d301      	bcc.n	8001ddc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e010      	b.n	8001dfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <SysTick_Config+0x44>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	3a01      	subs	r2, #1
 8001de2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de4:	2301      	movs	r3, #1
 8001de6:	425b      	negs	r3, r3
 8001de8:	2103      	movs	r1, #3
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7ff ff7c 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x44>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x44>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	210f      	movs	r1, #15
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	1c02      	adds	r2, r0, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	0011      	movs	r1, r2
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff ffbf 	bl	8001dc4 <SysTick_Config>
 8001e46:	0003      	movs	r3, r0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e155      	b.n	800210c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <HAL_GPIO_Init+0x28>
 8001e76:	e146      	b.n	8002106 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	2201      	movs	r2, #1
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	58d3      	ldr	r3, [r2, r3]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2107      	movs	r1, #7
 8001f66:	400b      	ands	r3, r1
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	6939      	ldr	r1, [r7, #16]
 8001f80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_GPIO_Init+0x174>
 8001fc2:	e0a0      	b.n	8002106 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_GPIO_Init+0x2d4>)
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_GPIO_Init+0x2d4>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	619a      	str	r2, [r3, #24]
 8001fd0:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HAL_GPIO_Init+0x2d4>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_GPIO_Init+0x2d8>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	589b      	ldr	r3, [r3, r2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4013      	ands	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	2390      	movs	r3, #144	; 0x90
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	429a      	cmp	r2, r3
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x1ee>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a47      	ldr	r2, [pc, #284]	; (800212c <HAL_GPIO_Init+0x2dc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x1ea>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a46      	ldr	r2, [pc, #280]	; (8002130 <HAL_GPIO_Init+0x2e0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x1e6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a45      	ldr	r2, [pc, #276]	; (8002134 <HAL_GPIO_Init+0x2e4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x1e2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a44      	ldr	r2, [pc, #272]	; (8002138 <HAL_GPIO_Init+0x2e8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x1de>
 800202a:	2304      	movs	r3, #4
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x1f0>
 800202e:	2305      	movs	r3, #5
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x1f0>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x1f0>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x1f0>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x1f0>
 800203e:	2300      	movs	r3, #0
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	2103      	movs	r1, #3
 8002044:	400a      	ands	r2, r1
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002050:	4935      	ldr	r1, [pc, #212]	; (8002128 <HAL_GPIO_Init+0x2d8>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_GPIO_Init+0x2ec>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43da      	mvns	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	025b      	lsls	r3, r3, #9
 8002076:	4013      	ands	r3, r2
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_GPIO_Init+0x2ec>)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_GPIO_Init+0x2ec>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43da      	mvns	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	4013      	ands	r3, r2
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_GPIO_Init+0x2ec>)
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_GPIO_Init+0x2ec>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	035b      	lsls	r3, r3, #13
 80020ca:	4013      	ands	r3, r2
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_GPIO_Init+0x2ec>)
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_GPIO_Init+0x2ec>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43da      	mvns	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	039b      	lsls	r3, r3, #14
 80020f4:	4013      	ands	r3, r2
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_GPIO_Init+0x2ec>)
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	40da      	lsrs	r2, r3
 8002114:	1e13      	subs	r3, r2, #0
 8002116:	d000      	beq.n	800211a <HAL_GPIO_Init+0x2ca>
 8002118:	e6a2      	b.n	8001e60 <HAL_GPIO_Init+0x10>
  } 
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b006      	add	sp, #24
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	48000400 	.word	0x48000400
 8002130:	48000800 	.word	0x48000800
 8002134:	48000c00 	.word	0x48000c00
 8002138:	48001000 	.word	0x48001000
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	0008      	movs	r0, r1
 800214a:	0011      	movs	r1, r2
 800214c:	1cbb      	adds	r3, r7, #2
 800214e:	1c02      	adds	r2, r0, #0
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	1c7b      	adds	r3, r7, #1
 8002154:	1c0a      	adds	r2, r1, #0
 8002156:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002158:	1c7b      	adds	r3, r7, #1
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002160:	1cbb      	adds	r3, r7, #2
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800216a:	1cbb      	adds	r3, r7, #2
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	f000 fb76 	bl	800287c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	d100      	bne.n	800219c <HAL_RCC_OscConfig+0x20>
 800219a:	e08e      	b.n	80022ba <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800219c:	4bc5      	ldr	r3, [pc, #788]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	220c      	movs	r2, #12
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00e      	beq.n	80021c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a8:	4bc2      	ldr	r3, [pc, #776]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	220c      	movs	r2, #12
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d117      	bne.n	80021e4 <HAL_RCC_OscConfig+0x68>
 80021b4:	4bbf      	ldr	r3, [pc, #764]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	23c0      	movs	r3, #192	; 0xc0
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	401a      	ands	r2, r3
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	025b      	lsls	r3, r3, #9
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d10e      	bne.n	80021e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c6:	4bbb      	ldr	r3, [pc, #748]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	029b      	lsls	r3, r3, #10
 80021ce:	4013      	ands	r3, r2
 80021d0:	d100      	bne.n	80021d4 <HAL_RCC_OscConfig+0x58>
 80021d2:	e071      	b.n	80022b8 <HAL_RCC_OscConfig+0x13c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d000      	beq.n	80021de <HAL_RCC_OscConfig+0x62>
 80021dc:	e06c      	b.n	80022b8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	f000 fb4c 	bl	800287c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x80>
 80021ec:	4bb1      	ldr	r3, [pc, #708]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4bb0      	ldr	r3, [pc, #704]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	0249      	lsls	r1, r1, #9
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e02f      	b.n	800225c <HAL_RCC_OscConfig+0xe0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0xa2>
 8002204:	4bab      	ldr	r3, [pc, #684]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4baa      	ldr	r3, [pc, #680]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800220a:	49ab      	ldr	r1, [pc, #684]	; (80024b8 <HAL_RCC_OscConfig+0x33c>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	4ba8      	ldr	r3, [pc, #672]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4ba7      	ldr	r3, [pc, #668]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002216:	49a9      	ldr	r1, [pc, #676]	; (80024bc <HAL_RCC_OscConfig+0x340>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e01e      	b.n	800225c <HAL_RCC_OscConfig+0xe0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d10e      	bne.n	8002244 <HAL_RCC_OscConfig+0xc8>
 8002226:	4ba3      	ldr	r3, [pc, #652]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4ba2      	ldr	r3, [pc, #648]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	02c9      	lsls	r1, r1, #11
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	4b9f      	ldr	r3, [pc, #636]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b9e      	ldr	r3, [pc, #632]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	0249      	lsls	r1, r1, #9
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0xe0>
 8002244:	4b9b      	ldr	r3, [pc, #620]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b9a      	ldr	r3, [pc, #616]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800224a:	499b      	ldr	r1, [pc, #620]	; (80024b8 <HAL_RCC_OscConfig+0x33c>)
 800224c:	400a      	ands	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	4b98      	ldr	r3, [pc, #608]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b97      	ldr	r3, [pc, #604]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002256:	4999      	ldr	r1, [pc, #612]	; (80024bc <HAL_RCC_OscConfig+0x340>)
 8002258:	400a      	ands	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d014      	beq.n	800228e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fd36 	bl	8001cd4 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226e:	f7ff fd31 	bl	8001cd4 <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e2fd      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002280:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	4013      	ands	r3, r2
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0xf2>
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fd21 	bl	8001cd4 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fd1c 	bl	8001cd4 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e2e8      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	029b      	lsls	r3, r3, #10
 80022b2:	4013      	ands	r3, r2
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x11c>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2202      	movs	r2, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x14a>
 80022c4:	e06c      	b.n	80023a0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022c6:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	220c      	movs	r2, #12
 80022cc:	4013      	ands	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	220c      	movs	r2, #12
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d11f      	bne.n	800231c <HAL_RCC_OscConfig+0x1a0>
 80022dc:	4b75      	ldr	r3, [pc, #468]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	025b      	lsls	r3, r3, #9
 80022e4:	401a      	ands	r2, r3
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b71      	ldr	r3, [pc, #452]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_OscConfig+0x188>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e2bb      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	22f8      	movs	r2, #248	; 0xf8
 800230a:	4393      	bics	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00da      	lsls	r2, r3, #3
 8002314:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e041      	b.n	80023a0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d024      	beq.n	800236e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800232a:	2101      	movs	r1, #1
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fcd0 	bl	8001cd4 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fccb 	bl	8001cd4 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e297      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d0f1      	beq.n	800233a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	22f8      	movs	r2, #248	; 0xf8
 800235c:	4393      	bics	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00da      	lsls	r2, r3, #3
 8002366:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e018      	b.n	80023a0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002374:	2101      	movs	r1, #1
 8002376:	438a      	bics	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff fcab 	bl	8001cd4 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fca6 	bl	8001cd4 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e272      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d1f1      	bne.n	8002384 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2208      	movs	r2, #8
 80023a6:	4013      	ands	r3, r2
 80023a8:	d036      	beq.n	8002418 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80023b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b6:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff fc89 	bl	8001cd4 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c8:	f7ff fc84 	bl	8001cd4 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e250      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f1      	beq.n	80023c8 <HAL_RCC_OscConfig+0x24c>
 80023e4:	e018      	b.n	8002418 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80023e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ea:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	438a      	bics	r2, r1
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fc6f 	bl	8001cd4 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fc6a 	bl	8001cd4 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e236      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	d1f1      	bne.n	80023fc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2204      	movs	r2, #4
 800241e:	4013      	ands	r3, r2
 8002420:	d100      	bne.n	8002424 <HAL_RCC_OscConfig+0x2a8>
 8002422:	e0b5      	b.n	8002590 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002424:	201f      	movs	r0, #31
 8002426:	183b      	adds	r3, r7, r0
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	055b      	lsls	r3, r3, #21
 8002434:	4013      	ands	r3, r2
 8002436:	d110      	bne.n	800245a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0549      	lsls	r1, r1, #21
 8002442:	430a      	orrs	r2, r1
 8002444:	61da      	str	r2, [r3, #28]
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	055b      	lsls	r3, r3, #21
 800244e:	4013      	ands	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002454:	183b      	adds	r3, r7, r0
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_OscConfig+0x344>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d11a      	bne.n	800249c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_RCC_OscConfig+0x344>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_RCC_OscConfig+0x344>)
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0049      	lsls	r1, r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002474:	f7ff fc2e 	bl	8001cd4 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247e:	f7ff fc29 	bl	8001cd4 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	; 0x64
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e1f5      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_OscConfig+0x344>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4013      	ands	r3, r2
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10f      	bne.n	80024c4 <HAL_RCC_OscConfig+0x348>
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80024aa:	2101      	movs	r1, #1
 80024ac:	430a      	orrs	r2, r1
 80024ae:	621a      	str	r2, [r3, #32]
 80024b0:	e036      	b.n	8002520 <HAL_RCC_OscConfig+0x3a4>
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40021000 	.word	0x40021000
 80024b8:	fffeffff 	.word	0xfffeffff
 80024bc:	fffbffff 	.word	0xfffbffff
 80024c0:	40007000 	.word	0x40007000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x36a>
 80024cc:	4bca      	ldr	r3, [pc, #808]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	4bc9      	ldr	r3, [pc, #804]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	2101      	movs	r1, #1
 80024d4:	438a      	bics	r2, r1
 80024d6:	621a      	str	r2, [r3, #32]
 80024d8:	4bc7      	ldr	r3, [pc, #796]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	4bc6      	ldr	r3, [pc, #792]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80024de:	2104      	movs	r1, #4
 80024e0:	438a      	bics	r2, r1
 80024e2:	621a      	str	r2, [r3, #32]
 80024e4:	e01c      	b.n	8002520 <HAL_RCC_OscConfig+0x3a4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x38c>
 80024ee:	4bc2      	ldr	r3, [pc, #776]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	4bc1      	ldr	r3, [pc, #772]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80024f4:	2104      	movs	r1, #4
 80024f6:	430a      	orrs	r2, r1
 80024f8:	621a      	str	r2, [r3, #32]
 80024fa:	4bbf      	ldr	r3, [pc, #764]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	4bbe      	ldr	r3, [pc, #760]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002500:	2101      	movs	r1, #1
 8002502:	430a      	orrs	r2, r1
 8002504:	621a      	str	r2, [r3, #32]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0x3a4>
 8002508:	4bbb      	ldr	r3, [pc, #748]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	4bba      	ldr	r3, [pc, #744]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	621a      	str	r2, [r3, #32]
 8002514:	4bb8      	ldr	r3, [pc, #736]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	4bb7      	ldr	r3, [pc, #732]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800251a:	2104      	movs	r1, #4
 800251c:	438a      	bics	r2, r1
 800251e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d014      	beq.n	8002552 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7ff fbd4 	bl	8001cd4 <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e009      	b.n	8002546 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff fbcf 	bl	8001cd4 <HAL_GetTick>
 8002536:	0002      	movs	r2, r0
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	4aaf      	ldr	r2, [pc, #700]	; (80027fc <HAL_RCC_OscConfig+0x680>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e19a      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002546:	4bac      	ldr	r3, [pc, #688]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x3b6>
 8002550:	e013      	b.n	800257a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002552:	f7ff fbbf 	bl	8001cd4 <HAL_GetTick>
 8002556:	0003      	movs	r3, r0
 8002558:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255a:	e009      	b.n	8002570 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7ff fbba 	bl	8001cd4 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	4aa5      	ldr	r2, [pc, #660]	; (80027fc <HAL_RCC_OscConfig+0x680>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e185      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002570:	4ba1      	ldr	r3, [pc, #644]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	2202      	movs	r2, #2
 8002576:	4013      	ands	r3, r2
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800257a:	231f      	movs	r3, #31
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b9c      	ldr	r3, [pc, #624]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	4b9b      	ldr	r3, [pc, #620]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800258a:	499d      	ldr	r1, [pc, #628]	; (8002800 <HAL_RCC_OscConfig+0x684>)
 800258c:	400a      	ands	r2, r1
 800258e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2210      	movs	r2, #16
 8002596:	4013      	ands	r3, r2
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d12a      	bne.n	80025f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025a2:	4b95      	ldr	r3, [pc, #596]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a6:	4b94      	ldr	r3, [pc, #592]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80025a8:	2104      	movs	r1, #4
 80025aa:	430a      	orrs	r2, r1
 80025ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80025ae:	4b92      	ldr	r3, [pc, #584]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80025b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b2:	4b91      	ldr	r3, [pc, #580]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80025b4:	2101      	movs	r1, #1
 80025b6:	430a      	orrs	r2, r1
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7ff fb8b 	bl	8001cd4 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025c4:	f7ff fb86 	bl	8001cd4 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e152      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025d6:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80025d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	d0f1      	beq.n	80025c4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025e0:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	22f8      	movs	r2, #248	; 0xf8
 80025e6:	4393      	bics	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	00da      	lsls	r2, r3, #3
 80025f0:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
 80025f6:	e034      	b.n	8002662 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	3305      	adds	r3, #5
 80025fe:	d111      	bne.n	8002624 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002600:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002604:	4b7c      	ldr	r3, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002606:	2104      	movs	r1, #4
 8002608:	438a      	bics	r2, r1
 800260a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800260c:	4b7a      	ldr	r3, [pc, #488]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	22f8      	movs	r2, #248	; 0xf8
 8002612:	4393      	bics	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	00da      	lsls	r2, r3, #3
 800261c:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800261e:	430a      	orrs	r2, r1
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
 8002622:	e01e      	b.n	8002662 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002624:	4b74      	ldr	r3, [pc, #464]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002628:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800262a:	2104      	movs	r1, #4
 800262c:	430a      	orrs	r2, r1
 800262e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002630:	4b71      	ldr	r3, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002634:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002636:	2101      	movs	r1, #1
 8002638:	438a      	bics	r2, r1
 800263a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7ff fb4a 	bl	8001cd4 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002646:	f7ff fb45 	bl	8001cd4 <HAL_GetTick>
 800264a:	0002      	movs	r2, r0
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e111      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002658:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	d1f1      	bne.n	8002646 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2220      	movs	r2, #32
 8002668:	4013      	ands	r3, r2
 800266a:	d05c      	beq.n	8002726 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800266c:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	220c      	movs	r2, #12
 8002672:	4013      	ands	r3, r2
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d00e      	beq.n	8002696 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002678:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	220c      	movs	r2, #12
 800267e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002680:	2b08      	cmp	r3, #8
 8002682:	d114      	bne.n	80026ae <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002684:	4b5c      	ldr	r3, [pc, #368]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	23c0      	movs	r3, #192	; 0xc0
 800268a:	025b      	lsls	r3, r3, #9
 800268c:	401a      	ands	r2, r3
 800268e:	23c0      	movs	r3, #192	; 0xc0
 8002690:	025b      	lsls	r3, r3, #9
 8002692:	429a      	cmp	r2, r3
 8002694:	d10b      	bne.n	80026ae <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002696:	4b58      	ldr	r3, [pc, #352]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	025b      	lsls	r3, r3, #9
 800269e:	4013      	ands	r3, r2
 80026a0:	d040      	beq.n	8002724 <HAL_RCC_OscConfig+0x5a8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d03c      	beq.n	8002724 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0e6      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01b      	beq.n	80026ee <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80026b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ba:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0249      	lsls	r1, r1, #9
 80026c0:	430a      	orrs	r2, r1
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fb06 	bl	8001cd4 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ce:	f7ff fb01 	bl	8001cd4 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0cd      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80026e0:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80026e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	025b      	lsls	r3, r3, #9
 80026e8:	4013      	ands	r3, r2
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x552>
 80026ec:	e01b      	b.n	8002726 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80026ee:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80026f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80026f4:	4943      	ldr	r1, [pc, #268]	; (8002804 <HAL_RCC_OscConfig+0x688>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7ff faeb 	bl	8001cd4 <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002704:	f7ff fae6 	bl	8001cd4 <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0b2      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	025b      	lsls	r3, r3, #9
 800271e:	4013      	ands	r3, r2
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x588>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002724:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	d100      	bne.n	8002730 <HAL_RCC_OscConfig+0x5b4>
 800272e:	e0a4      	b.n	800287a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	220c      	movs	r2, #12
 8002736:	4013      	ands	r3, r2
 8002738:	2b08      	cmp	r3, #8
 800273a:	d100      	bne.n	800273e <HAL_RCC_OscConfig+0x5c2>
 800273c:	e078      	b.n	8002830 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b02      	cmp	r3, #2
 8002744:	d14c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800274c:	492e      	ldr	r1, [pc, #184]	; (8002808 <HAL_RCC_OscConfig+0x68c>)
 800274e:	400a      	ands	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff fabf 	bl	8001cd4 <HAL_GetTick>
 8002756:	0003      	movs	r3, r0
 8002758:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff faba 	bl	8001cd4 <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e086      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	049b      	lsls	r3, r3, #18
 8002776:	4013      	ands	r3, r2
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277a:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	220f      	movs	r2, #15
 8002780:	4393      	bics	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 800278a:	430a      	orrs	r2, r1
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a1e      	ldr	r2, [pc, #120]	; (800280c <HAL_RCC_OscConfig+0x690>)
 8002794:	4013      	ands	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	431a      	orrs	r2, r3
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	0449      	lsls	r1, r1, #17
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7ff fa8d 	bl	8001cd4 <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7ff fa88 	bl	8001cd4 <HAL_GetTick>
 80027c4:	0002      	movs	r2, r0
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e054      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	049b      	lsls	r3, r3, #18
 80027da:	4013      	ands	r3, r2
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x644>
 80027de:	e04c      	b.n	800287a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_RCC_OscConfig+0x67c>)
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <HAL_RCC_OscConfig+0x68c>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff fa72 	bl	8001cd4 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x6a6>
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	40021000 	.word	0x40021000
 80027fc:	00001388 	.word	0x00001388
 8002800:	efffffff 	.word	0xefffffff
 8002804:	fffeffff 	.word	0xfffeffff
 8002808:	feffffff 	.word	0xfeffffff
 800280c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7ff fa60 	bl	8001cd4 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e02c      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_RCC_OscConfig+0x708>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	049b      	lsls	r3, r3, #18
 800282a:	4013      	ands	r3, r2
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x694>
 800282e:	e024      	b.n	800287a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e01f      	b.n	800287c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_OscConfig+0x708>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x708>)
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	23c0      	movs	r3, #192	; 0xc0
 800284c:	025b      	lsls	r3, r3, #9
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	429a      	cmp	r2, r3
 8002856:	d10e      	bne.n	8002876 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	220f      	movs	r2, #15
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	23f0      	movs	r3, #240	; 0xf0
 800286a:	039b      	lsls	r3, r3, #14
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b008      	add	sp, #32
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0bf      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d911      	bls.n	80028ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0a6      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d015      	beq.n	8002904 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2204      	movs	r2, #4
 80028de:	4013      	ands	r3, r2
 80028e0:	d006      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028e2:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 80028e8:	21e0      	movs	r1, #224	; 0xe0
 80028ea:	00c9      	lsls	r1, r1, #3
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	22f0      	movs	r2, #240	; 0xf0
 80028f6:	4393      	bics	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	d04c      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	4013      	ands	r3, r2
 8002920:	d120      	bne.n	8002964 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07a      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	049b      	lsls	r3, r3, #18
 8002936:	4013      	ands	r3, r2
 8002938:	d114      	bne.n	8002964 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06e      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	025b      	lsls	r3, r3, #9
 800294e:	4013      	ands	r3, r2
 8002950:	d108      	bne.n	8002964 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e062      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e05b      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002964:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	4393      	bics	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002978:	f7ff f9ac 	bl	8001cd4 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002980:	e009      	b.n	8002996 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002982:	f7ff f9a7 	bl	8001cd4 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_RCC_ClockConfig+0x1a4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e042      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	220c      	movs	r2, #12
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1ec      	bne.n	8002982 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	4013      	ands	r3, r2
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d211      	bcs.n	80029da <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	4393      	bics	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c8:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x19c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	4013      	ands	r3, r2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d001      	beq.n	80029da <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e020      	b.n	8002a1c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2204      	movs	r2, #4
 80029e0:	4013      	ands	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_RCC_ClockConfig+0x1a8>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029f8:	f000 f820 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029fc:	0001      	movs	r1, r0
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1a0>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	220f      	movs	r2, #15
 8002a06:	4013      	ands	r3, r2
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_RCC_ClockConfig+0x1ac>)
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	40da      	lsrs	r2, r3
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1b0>)
 8002a12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff f917 	bl	8001c48 <HAL_InitTick>
  
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40022000 	.word	0x40022000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	00001388 	.word	0x00001388
 8002a30:	fffff8ff 	.word	0xfffff8ff
 8002a34:	080051a8 	.word	0x080051a8
 8002a38:	20000000 	.word	0x20000000

08002a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b08f      	sub	sp, #60	; 0x3c
 8002a40:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a42:	2314      	movs	r3, #20
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	4a38      	ldr	r2, [pc, #224]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xec>)
 8002a48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a4a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	4a36      	ldr	r2, [pc, #216]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002a54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a56:	c313      	stmia	r3!, {r0, r1, r4}
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a64:	2300      	movs	r3, #0
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a70:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	220c      	movs	r2, #12
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d047      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0xd4>
 8002a80:	d849      	bhi.n	8002b16 <HAL_RCC_GetSysClockFreq+0xda>
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d002      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x50>
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x56>
 8002a8a:	e044      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a8c:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a90:	e044      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	0c9b      	lsrs	r3, r3, #18
 8002a96:	220f      	movs	r2, #15
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2214      	movs	r2, #20
 8002a9c:	18ba      	adds	r2, r7, r2
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	1d3a      	adds	r2, r7, #4
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab2:	23c0      	movs	r3, #192	; 0xc0
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	025b      	lsls	r3, r3, #9
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d109      	bne.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac2:	481c      	ldr	r0, [pc, #112]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac4:	f7fd fb20 	bl	8000108 <__udivsi3>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	001a      	movs	r2, r3
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	4353      	muls	r3, r2
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad2:	e01a      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	025b      	lsls	r3, r3, #9
 8002ada:	401a      	ands	r2, r3
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ae6:	4814      	ldr	r0, [pc, #80]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ae8:	f7fd fb0e 	bl	8000108 <__udivsi3>
 8002aec:	0003      	movs	r3, r0
 8002aee:	001a      	movs	r2, r3
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	4353      	muls	r3, r2
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002afa:	480e      	ldr	r0, [pc, #56]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afc:	f7fd fb04 	bl	8000108 <__udivsi3>
 8002b00:	0003      	movs	r3, r0
 8002b02:	001a      	movs	r2, r3
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	4353      	muls	r3, r2
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b0e:	e005      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b14:	e002      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b1a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b00f      	add	sp, #60	; 0x3c
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	08005108 	.word	0x08005108
 8002b2c:	08005118 	.word	0x08005118
 8002b30:	40021000 	.word	0x40021000
 8002b34:	007a1200 	.word	0x007a1200
 8002b38:	02dc6c00 	.word	0x02dc6c00

08002b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b40:	4b02      	ldr	r3, [pc, #8]	; (8002b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	20000000 	.word	0x20000000

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b54:	f7ff fff2 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b58:	0001      	movs	r1, r0
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	2207      	movs	r2, #7
 8002b62:	4013      	ands	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b66:	5cd3      	ldrb	r3, [r2, r3]
 8002b68:	40d9      	lsrs	r1, r3
 8002b6a:	000b      	movs	r3, r1
}    
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40021000 	.word	0x40021000
 8002b78:	080051b8 	.word	0x080051b8

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	025b      	lsls	r3, r3, #9
 8002b94:	4013      	ands	r3, r2
 8002b96:	d100      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b98:	e08e      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2017      	movs	r0, #23
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b6e      	ldr	r3, [pc, #440]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	055b      	lsls	r3, r3, #21
 8002baa:	4013      	ands	r3, r2
 8002bac:	d110      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b6b      	ldr	r3, [pc, #428]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	0549      	lsls	r1, r1, #21
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
 8002bbc:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	055b      	lsls	r3, r3, #21
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d11a      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bdc:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	0049      	lsls	r1, r1, #1
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7ff f873 	bl	8001cd4 <HAL_GetTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	e008      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7ff f86e 	bl	8001cd4 <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0a6      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b56      	ldr	r3, [pc, #344]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c12:	4b52      	ldr	r3, [pc, #328]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d034      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	23c0      	movs	r3, #192	; 0xc0
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d02c      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c34:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0249      	lsls	r1, r1, #9
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	4b42      	ldr	r3, [pc, #264]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c52:	4945      	ldr	r1, [pc, #276]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	4013      	ands	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7ff f835 	bl	8001cd4 <HAL_GetTick>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	e009      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7ff f830 	bl	8001cd4 <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	4a3c      	ldr	r2, [pc, #240]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e067      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b35      	ldr	r3, [pc, #212]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca2:	2317      	movs	r3, #23
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cb2:	492f      	ldr	r1, [pc, #188]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	4393      	bics	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	2210      	movs	r2, #16
 8002d04:	4393      	bics	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	029b      	lsls	r3, r3, #10
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	4393      	bics	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	2240      	movs	r2, #64	; 0x40
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b006      	add	sp, #24
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
 8002d64:	fffffcff 	.word	0xfffffcff
 8002d68:	fffeffff 	.word	0xfffeffff
 8002d6c:	00001388 	.word	0x00001388
 8002d70:	efffffff 	.word	0xefffffff
 8002d74:	fffcffff 	.word	0xfffcffff

08002d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0a8      	b.n	8002edc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	2382      	movs	r3, #130	; 0x82
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d009      	beq.n	8002db2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	61da      	str	r2, [r3, #28]
 8002da4:	e005      	b.n	8002db2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	225d      	movs	r2, #93	; 0x5d
 8002dbc:	5c9b      	ldrb	r3, [r3, r2]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	225c      	movs	r2, #92	; 0x5c
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7fe fcb6 	bl	8001740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	225d      	movs	r2, #93	; 0x5d
 8002dd8:	2102      	movs	r1, #2
 8002dda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	438a      	bics	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	23e0      	movs	r3, #224	; 0xe0
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d902      	bls.n	8002dfe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e002      	b.n	8002e04 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	015b      	lsls	r3, r3, #5
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	23f0      	movs	r3, #240	; 0xf0
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d008      	beq.n	8002e22 <HAL_SPI_Init+0xaa>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	23e0      	movs	r3, #224	; 0xe0
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d002      	beq.n	8002e22 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	2382      	movs	r3, #130	; 0x82
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	2384      	movs	r3, #132	; 0x84
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	400b      	ands	r3, r1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	400b      	ands	r3, r1
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2101      	movs	r1, #1
 8002e48:	400b      	ands	r3, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6999      	ldr	r1, [r3, #24]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	400b      	ands	r3, r1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2138      	movs	r1, #56	; 0x38
 8002e5e:	400b      	ands	r3, r1
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	400b      	ands	r3, r1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	0011      	movs	r1, r2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	019b      	lsls	r3, r3, #6
 8002e76:	401a      	ands	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	2204      	movs	r2, #4
 8002e88:	401a      	ands	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2110      	movs	r1, #16
 8002e90:	400b      	ands	r3, r1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	2108      	movs	r1, #8
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68d9      	ldr	r1, [r3, #12]
 8002ea2:	23f0      	movs	r3, #240	; 0xf0
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	400b      	ands	r3, r1
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	0011      	movs	r1, r2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	015b      	lsls	r3, r3, #5
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4907      	ldr	r1, [pc, #28]	; (8002ee4 <HAL_SPI_Init+0x16c>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	225d      	movs	r2, #93	; 0x5d
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	fffff7ff 	.word	0xfffff7ff

08002ee8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	1dbb      	adds	r3, r7, #6
 8002ef6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef8:	231f      	movs	r3, #31
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	225c      	movs	r2, #92	; 0x5c
 8002f04:	5c9b      	ldrb	r3, [r3, r2]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_SPI_Transmit+0x26>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e140      	b.n	8003190 <HAL_SPI_Transmit+0x2a8>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	225c      	movs	r2, #92	; 0x5c
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f16:	f7fe fedd 	bl	8001cd4 <HAL_GetTick>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f1e:	2316      	movs	r3, #22
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	1dba      	adds	r2, r7, #6
 8002f24:	8812      	ldrh	r2, [r2, #0]
 8002f26:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	225d      	movs	r2, #93	; 0x5d
 8002f2c:	5c9b      	ldrb	r3, [r3, r2]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d004      	beq.n	8002f3e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002f34:	231f      	movs	r3, #31
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f3c:	e11d      	b.n	800317a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_SPI_Transmit+0x64>
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002f4c:	231f      	movs	r3, #31
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f54:	e111      	b.n	800317a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	225d      	movs	r2, #93	; 0x5d
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1dba      	adds	r2, r7, #6
 8002f6e:	8812      	ldrh	r2, [r2, #0]
 8002f70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1dba      	adds	r2, r7, #6
 8002f76:	8812      	ldrh	r2, [r2, #0]
 8002f78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2244      	movs	r2, #68	; 0x44
 8002f84:	2100      	movs	r1, #0
 8002f86:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2246      	movs	r2, #70	; 0x46
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d110      	bne.n	8002fca <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2140      	movs	r1, #64	; 0x40
 8002fb4:	438a      	bics	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2180      	movs	r1, #128	; 0x80
 8002fc4:	01c9      	lsls	r1, r1, #7
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2240      	movs	r2, #64	; 0x40
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d007      	beq.n	8002fe8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	23e0      	movs	r3, #224	; 0xe0
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d94e      	bls.n	8003092 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <HAL_SPI_Transmit+0x11e>
 8002ffc:	2316      	movs	r3, #22
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d13f      	bne.n	8003086 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	881a      	ldrh	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	1c9a      	adds	r2, r3, #2
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800302a:	e02c      	b.n	8003086 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2202      	movs	r2, #2
 8003034:	4013      	ands	r3, r2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d112      	bne.n	8003060 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	881a      	ldrh	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800305e:	e012      	b.n	8003086 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003060:	f7fe fe38 	bl	8001cd4 <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d802      	bhi.n	8003076 <HAL_SPI_Transmit+0x18e>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_SPI_Transmit+0x194>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800307c:	231f      	movs	r3, #31
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2203      	movs	r2, #3
 8003082:	701a      	strb	r2, [r3, #0]
          goto error;
 8003084:	e079      	b.n	800317a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1cd      	bne.n	800302c <HAL_SPI_Transmit+0x144>
 8003090:	e04f      	b.n	8003132 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_SPI_Transmit+0x1bc>
 800309a:	2316      	movs	r3, #22
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d141      	bne.n	8003128 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80030ca:	e02d      	b.n	8003128 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d113      	bne.n	8003102 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003100:	e012      	b.n	8003128 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003102:	f7fe fde7 	bl	8001cd4 <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d802      	bhi.n	8003118 <HAL_SPI_Transmit+0x230>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	d102      	bne.n	800311e <HAL_SPI_Transmit+0x236>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800311e:	231f      	movs	r3, #31
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	2203      	movs	r2, #3
 8003124:	701a      	strb	r2, [r3, #0]
          goto error;
 8003126:	e028      	b.n	800317a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1cc      	bne.n	80030cc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0018      	movs	r0, r3
 800313a:	f000 fcd9 	bl	8003af0 <SPI_EndRxTxTransaction>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800316e:	231f      	movs	r3, #31
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e000      	b.n	800317a <HAL_SPI_Transmit+0x292>
  }

error:
 8003178:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	225d      	movs	r2, #93	; 0x5d
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	225c      	movs	r2, #92	; 0x5c
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800318a:	231f      	movs	r3, #31
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	781b      	ldrb	r3, [r3, #0]
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b008      	add	sp, #32
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	1dbb      	adds	r3, r7, #6
 80031a6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031a8:	2317      	movs	r3, #23
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	2382      	movs	r3, #130	; 0x82
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d113      	bne.n	80031e4 <HAL_SPI_Receive+0x4c>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10f      	bne.n	80031e4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	225d      	movs	r2, #93	; 0x5d
 80031c8:	2104      	movs	r1, #4
 80031ca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031cc:	1dbb      	adds	r3, r7, #6
 80031ce:	881c      	ldrh	r4, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	0023      	movs	r3, r4
 80031dc:	f000 f928 	bl	8003430 <HAL_SPI_TransmitReceive>
 80031e0:	0003      	movs	r3, r0
 80031e2:	e11c      	b.n	800341e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	225c      	movs	r2, #92	; 0x5c
 80031e8:	5c9b      	ldrb	r3, [r3, r2]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_SPI_Receive+0x5a>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e115      	b.n	800341e <HAL_SPI_Receive+0x286>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	225c      	movs	r2, #92	; 0x5c
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031fa:	f7fe fd6b 	bl	8001cd4 <HAL_GetTick>
 80031fe:	0003      	movs	r3, r0
 8003200:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	225d      	movs	r2, #93	; 0x5d
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d004      	beq.n	8003218 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800320e:	2317      	movs	r3, #23
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
    goto error;
 8003216:	e0f7      	b.n	8003408 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_SPI_Receive+0x8e>
 800321e:	1dbb      	adds	r3, r7, #6
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003226:	2317      	movs	r3, #23
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
    goto error;
 800322e:	e0eb      	b.n	8003408 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	225d      	movs	r2, #93	; 0x5d
 8003234:	2104      	movs	r1, #4
 8003236:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1dba      	adds	r2, r7, #6
 8003248:	2144      	movs	r1, #68	; 0x44
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1dba      	adds	r2, r7, #6
 8003252:	2146      	movs	r1, #70	; 0x46
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	23e0      	movs	r3, #224	; 0xe0
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	429a      	cmp	r2, r3
 8003280:	d908      	bls.n	8003294 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4966      	ldr	r1, [pc, #408]	; (8003428 <HAL_SPI_Receive+0x290>)
 800328e:	400a      	ands	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	e008      	b.n	80032a6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	0149      	lsls	r1, r1, #5
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d10f      	bne.n	80032d2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2140      	movs	r1, #64	; 0x40
 80032be:	438a      	bics	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4957      	ldr	r1, [pc, #348]	; (800342c <HAL_SPI_Receive+0x294>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	4013      	ands	r3, r2
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d007      	beq.n	80032f0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	23e0      	movs	r3, #224	; 0xe0
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d900      	bls.n	80032fe <HAL_SPI_Receive+0x166>
 80032fc:	e069      	b.n	80033d2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032fe:	e031      	b.n	8003364 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2201      	movs	r2, #1
 8003308:	4013      	ands	r3, r2
 800330a:	2b01      	cmp	r3, #1
 800330c:	d117      	bne.n	800333e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	001a      	movs	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2246      	movs	r2, #70	; 0x46
 800332e:	5a9b      	ldrh	r3, [r3, r2]
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b299      	uxth	r1, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2246      	movs	r2, #70	; 0x46
 800333a:	5299      	strh	r1, [r3, r2]
 800333c:	e012      	b.n	8003364 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800333e:	f7fe fcc9 	bl	8001cd4 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d802      	bhi.n	8003354 <HAL_SPI_Receive+0x1bc>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_SPI_Receive+0x1c2>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800335a:	2317      	movs	r3, #23
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2203      	movs	r2, #3
 8003360:	701a      	strb	r2, [r3, #0]
          goto error;
 8003362:	e051      	b.n	8003408 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2246      	movs	r2, #70	; 0x46
 8003368:	5a9b      	ldrh	r3, [r3, r2]
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1c7      	bne.n	8003300 <HAL_SPI_Receive+0x168>
 8003370:	e035      	b.n	80033de <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	2b01      	cmp	r3, #1
 800337e:	d115      	bne.n	80033ac <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	b292      	uxth	r2, r2
 800338c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2246      	movs	r2, #70	; 0x46
 800339c:	5a9b      	ldrh	r3, [r3, r2]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b299      	uxth	r1, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2246      	movs	r2, #70	; 0x46
 80033a8:	5299      	strh	r1, [r3, r2]
 80033aa:	e012      	b.n	80033d2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ac:	f7fe fc92 	bl	8001cd4 <HAL_GetTick>
 80033b0:	0002      	movs	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d802      	bhi.n	80033c2 <HAL_SPI_Receive+0x22a>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_SPI_Receive+0x230>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80033c8:	2317      	movs	r3, #23
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2203      	movs	r2, #3
 80033ce:	701a      	strb	r2, [r3, #0]
          goto error;
 80033d0:	e01a      	b.n	8003408 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2246      	movs	r2, #70	; 0x46
 80033d6:	5a9b      	ldrh	r3, [r3, r2]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1c9      	bne.n	8003372 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	6839      	ldr	r1, [r7, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 fb25 	bl	8003a34 <SPI_EndRxTransaction>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80033fc:	2317      	movs	r3, #23
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e000      	b.n	8003408 <HAL_SPI_Receive+0x270>
  }

error :
 8003406:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	225d      	movs	r2, #93	; 0x5d
 800340c:	2101      	movs	r1, #1
 800340e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	225c      	movs	r2, #92	; 0x5c
 8003414:	2100      	movs	r1, #0
 8003416:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003418:	2317      	movs	r3, #23
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	781b      	ldrb	r3, [r3, #0]
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b007      	add	sp, #28
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	ffffefff 	.word	0xffffefff
 800342c:	ffffbfff 	.word	0xffffbfff

08003430 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	001a      	movs	r2, r3
 800343e:	1cbb      	adds	r3, r7, #2
 8003440:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003442:	2301      	movs	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003446:	2323      	movs	r3, #35	; 0x23
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	225c      	movs	r2, #92	; 0x5c
 8003452:	5c9b      	ldrb	r3, [r3, r2]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_SPI_TransmitReceive+0x2c>
 8003458:	2302      	movs	r3, #2
 800345a:	e1b5      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x398>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	225c      	movs	r2, #92	; 0x5c
 8003460:	2101      	movs	r1, #1
 8003462:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003464:	f7fe fc36 	bl	8001cd4 <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800346c:	201b      	movs	r0, #27
 800346e:	183b      	adds	r3, r7, r0
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	215d      	movs	r1, #93	; 0x5d
 8003474:	5c52      	ldrb	r2, [r2, r1]
 8003476:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800347e:	2312      	movs	r3, #18
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	1cba      	adds	r2, r7, #2
 8003484:	8812      	ldrh	r2, [r2, #0]
 8003486:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003488:	183b      	adds	r3, r7, r0
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d011      	beq.n	80034b4 <HAL_SPI_TransmitReceive+0x84>
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	2382      	movs	r3, #130	; 0x82
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	429a      	cmp	r2, r3
 8003498:	d107      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x7a>
 80034a2:	183b      	adds	r3, r7, r0
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d004      	beq.n	80034b4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80034aa:	2323      	movs	r3, #35	; 0x23
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80034b2:	e17e      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x98>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x98>
 80034c0:	1cbb      	adds	r3, r7, #2
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80034c8:	2323      	movs	r3, #35	; 0x23
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80034d0:	e16f      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	225d      	movs	r2, #93	; 0x5d
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d003      	beq.n	80034e6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	225d      	movs	r2, #93	; 0x5d
 80034e2:	2105      	movs	r1, #5
 80034e4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1cba      	adds	r2, r7, #2
 80034f6:	2146      	movs	r1, #70	; 0x46
 80034f8:	8812      	ldrh	r2, [r2, #0]
 80034fa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1cba      	adds	r2, r7, #2
 8003500:	2144      	movs	r1, #68	; 0x44
 8003502:	8812      	ldrh	r2, [r2, #0]
 8003504:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1cba      	adds	r2, r7, #2
 8003510:	8812      	ldrh	r2, [r2, #0]
 8003512:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1cba      	adds	r2, r7, #2
 8003518:	8812      	ldrh	r2, [r2, #0]
 800351a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	23e0      	movs	r3, #224	; 0xe0
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	429a      	cmp	r2, r3
 8003532:	d908      	bls.n	8003546 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	49a4      	ldr	r1, [pc, #656]	; (80037d0 <HAL_SPI_TransmitReceive+0x3a0>)
 8003540:	400a      	ands	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	e008      	b.n	8003558 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0149      	lsls	r1, r1, #5
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	4013      	ands	r3, r2
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d007      	beq.n	8003576 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	23e0      	movs	r3, #224	; 0xe0
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	429a      	cmp	r2, r3
 8003580:	d800      	bhi.n	8003584 <HAL_SPI_TransmitReceive+0x154>
 8003582:	e07f      	b.n	8003684 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x168>
 800358c:	2312      	movs	r3, #18
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d000      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x168>
 8003596:	e069      	b.n	800366c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035bc:	e056      	b.n	800366c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2202      	movs	r2, #2
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d11b      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x1d4>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x1d4>
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d113      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2201      	movs	r2, #1
 800360c:	4013      	ands	r3, r2
 800360e:	2b01      	cmp	r3, #1
 8003610:	d11c      	bne.n	800364c <HAL_SPI_TransmitReceive+0x21c>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2246      	movs	r2, #70	; 0x46
 8003616:	5a9b      	ldrh	r3, [r3, r2]
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	b292      	uxth	r2, r2
 800362a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2246      	movs	r2, #70	; 0x46
 800363a:	5a9b      	ldrh	r3, [r3, r2]
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b299      	uxth	r1, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2246      	movs	r2, #70	; 0x46
 8003646:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003648:	2301      	movs	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800364c:	f7fe fb42 	bl	8001cd4 <HAL_GetTick>
 8003650:	0002      	movs	r2, r0
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003658:	429a      	cmp	r2, r3
 800365a:	d807      	bhi.n	800366c <HAL_SPI_TransmitReceive+0x23c>
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	3301      	adds	r3, #1
 8003660:	d004      	beq.n	800366c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003662:	2323      	movs	r3, #35	; 0x23
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	2203      	movs	r2, #3
 8003668:	701a      	strb	r2, [r3, #0]
        goto error;
 800366a:	e0a2      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1a3      	bne.n	80035be <HAL_SPI_TransmitReceive+0x18e>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2246      	movs	r2, #70	; 0x46
 800367a:	5a9b      	ldrh	r3, [r3, r2]
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d19d      	bne.n	80035be <HAL_SPI_TransmitReceive+0x18e>
 8003682:	e085      	b.n	8003790 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_SPI_TransmitReceive+0x268>
 800368c:	2312      	movs	r3, #18
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d000      	beq.n	8003698 <HAL_SPI_TransmitReceive+0x268>
 8003696:	e070      	b.n	800377a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	7812      	ldrb	r2, [r2, #0]
 80036a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036be:	e05c      	b.n	800377a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2202      	movs	r2, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d11c      	bne.n	8003708 <HAL_SPI_TransmitReceive+0x2d8>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x2d8>
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d114      	bne.n	8003708 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	330c      	adds	r3, #12
 80036e8:	7812      	ldrb	r2, [r2, #0]
 80036ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2201      	movs	r2, #1
 8003710:	4013      	ands	r3, r2
 8003712:	2b01      	cmp	r3, #1
 8003714:	d11e      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x324>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2246      	movs	r2, #70	; 0x46
 800371a:	5a9b      	ldrh	r3, [r3, r2]
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	001a      	movs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2246      	movs	r2, #70	; 0x46
 8003742:	5a9b      	ldrh	r3, [r3, r2]
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b299      	uxth	r1, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2246      	movs	r2, #70	; 0x46
 800374e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003750:	2301      	movs	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003754:	f7fe fabe 	bl	8001cd4 <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003760:	429a      	cmp	r2, r3
 8003762:	d802      	bhi.n	800376a <HAL_SPI_TransmitReceive+0x33a>
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	3301      	adds	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x340>
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003770:	2323      	movs	r3, #35	; 0x23
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2203      	movs	r2, #3
 8003776:	701a      	strb	r2, [r3, #0]
        goto error;
 8003778:	e01b      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d19d      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x290>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2246      	movs	r2, #70	; 0x46
 8003788:	5a9b      	ldrh	r3, [r3, r2]
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d197      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f9aa 	bl	8003af0 <SPI_EndRxTxTransaction>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d007      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80037a0:	2323      	movs	r3, #35	; 0x23
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	661a      	str	r2, [r3, #96]	; 0x60
 80037ae:	e000      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80037b0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	225d      	movs	r2, #93	; 0x5d
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	225c      	movs	r2, #92	; 0x5c
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80037c2:	2323      	movs	r3, #35	; 0x23
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	781b      	ldrb	r3, [r3, #0]
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b00a      	add	sp, #40	; 0x28
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	ffffefff 	.word	0xffffefff

080037d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037e4:	f7fe fa76 	bl	8001cd4 <HAL_GetTick>
 80037e8:	0002      	movs	r2, r0
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	18d3      	adds	r3, r2, r3
 80037f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037f4:	f7fe fa6e 	bl	8001cd4 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	015b      	lsls	r3, r3, #5
 8003802:	0d1b      	lsrs	r3, r3, #20
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	4353      	muls	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380a:	e058      	b.n	80038be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	d055      	beq.n	80038be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003812:	f7fe fa5f 	bl	8001cd4 <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	429a      	cmp	r2, r3
 8003820:	d902      	bls.n	8003828 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d142      	bne.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	21e0      	movs	r1, #224	; 0xe0
 8003834:	438a      	bics	r2, r1
 8003836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	2382      	movs	r3, #130	; 0x82
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	429a      	cmp	r2, r3
 8003842:	d113      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	429a      	cmp	r2, r3
 800384e:	d005      	beq.n	800385c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	429a      	cmp	r2, r3
 800385a:	d107      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2140      	movs	r1, #64	; 0x40
 8003868:	438a      	bics	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	429a      	cmp	r2, r3
 8003876:	d110      	bne.n	800389a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	491a      	ldr	r1, [pc, #104]	; (80038ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003884:	400a      	ands	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	0189      	lsls	r1, r1, #6
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	225d      	movs	r2, #93	; 0x5d
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	225c      	movs	r2, #92	; 0x5c
 80038a6:	2100      	movs	r1, #0
 80038a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e017      	b.n	80038de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	425a      	negs	r2, r3
 80038ce:	4153      	adcs	r3, r2
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	001a      	movs	r2, r3
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d197      	bne.n	800380c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b008      	add	sp, #32
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000000 	.word	0x20000000
 80038ec:	ffffdfff 	.word	0xffffdfff

080038f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038fe:	2317      	movs	r3, #23
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003906:	f7fe f9e5 	bl	8001cd4 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	18d3      	adds	r3, r2, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003916:	f7fe f9dd 	bl	8001cd4 <HAL_GetTick>
 800391a:	0003      	movs	r3, r0
 800391c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	0013      	movs	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	189b      	adds	r3, r3, r2
 8003930:	00da      	lsls	r2, r3, #3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	0d1b      	lsrs	r3, r3, #20
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	4353      	muls	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800393c:	e068      	b.n	8003a10 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	23c0      	movs	r3, #192	; 0xc0
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	429a      	cmp	r2, r3
 8003946:	d10a      	bne.n	800395e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	2117      	movs	r1, #23
 8003956:	187b      	adds	r3, r7, r1
 8003958:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800395a:	187b      	adds	r3, r7, r1
 800395c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	d055      	beq.n	8003a10 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003964:	f7fe f9b6 	bl	8001cd4 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	429a      	cmp	r2, r3
 8003972:	d902      	bls.n	800397a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d142      	bne.n	8003a00 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	21e0      	movs	r1, #224	; 0xe0
 8003986:	438a      	bics	r2, r1
 8003988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	2382      	movs	r3, #130	; 0x82
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	429a      	cmp	r2, r3
 8003994:	d113      	bne.n	80039be <SPI_WaitFifoStateUntilTimeout+0xce>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	429a      	cmp	r2, r3
 80039a0:	d005      	beq.n	80039ae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d107      	bne.n	80039be <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	438a      	bics	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d110      	bne.n	80039ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80039d6:	400a      	ands	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	0189      	lsls	r1, r1, #6
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	225d      	movs	r2, #93	; 0x5d
 80039f0:	2101      	movs	r1, #1
 80039f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	225c      	movs	r2, #92	; 0x5c
 80039f8:	2100      	movs	r1, #0
 80039fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e010      	b.n	8003a22 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d18e      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b00a      	add	sp, #40	; 0x28
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	ffffdfff 	.word	0xffffdfff

08003a34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	2382      	movs	r3, #130	; 0x82
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d113      	bne.n	8003a74 <SPI_EndRxTransaction+0x40>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d005      	beq.n	8003a64 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2140      	movs	r1, #64	; 0x40
 8003a70:	438a      	bics	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	f7ff fea7 	bl	80037d4 <SPI_WaitFlagStateUntilTimeout>
 8003a86:	1e03      	subs	r3, r0, #0
 8003a88:	d007      	beq.n	8003a9a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8e:	2220      	movs	r2, #32
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e026      	b.n	8003ae8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	2382      	movs	r3, #130	; 0x82
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d11f      	bne.n	8003ae6 <SPI_EndRxTransaction+0xb2>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d005      	beq.n	8003abe <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d113      	bne.n	8003ae6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	23c0      	movs	r3, #192	; 0xc0
 8003ac2:	00d9      	lsls	r1, r3, #3
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	0013      	movs	r3, r2
 8003acc:	2200      	movs	r2, #0
 8003ace:	f7ff ff0f 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d007      	beq.n	8003ae6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	2220      	movs	r2, #32
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e000      	b.n	8003ae8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b004      	add	sp, #16
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	23c0      	movs	r3, #192	; 0xc0
 8003b00:	0159      	lsls	r1, r3, #5
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	0013      	movs	r3, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f7ff fef0 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003b10:	1e03      	subs	r3, r0, #0
 8003b12:	d007      	beq.n	8003b24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	2220      	movs	r2, #32
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e027      	b.n	8003b74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	f7ff fe4f 	bl	80037d4 <SPI_WaitFlagStateUntilTimeout>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d007      	beq.n	8003b4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	2220      	movs	r2, #32
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e014      	b.n	8003b74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	23c0      	movs	r3, #192	; 0xc0
 8003b4e:	00d9      	lsls	r1, r3, #3
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	0013      	movs	r3, r2
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f7ff fec9 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003b5e:	1e03      	subs	r3, r0, #0
 8003b60:	d007      	beq.n	8003b72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	2220      	movs	r2, #32
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e000      	b.n	8003b74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e042      	b.n	8003c14 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223d      	movs	r2, #61	; 0x3d
 8003b92:	5c9b      	ldrb	r3, [r3, r2]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d107      	bne.n	8003baa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	223c      	movs	r2, #60	; 0x3c
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fd ff35 	bl	8001a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	223d      	movs	r2, #61	; 0x3d
 8003bae:	2102      	movs	r1, #2
 8003bb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	0019      	movs	r1, r3
 8003bbc:	0010      	movs	r0, r2
 8003bbe:	f000 fad7 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2246      	movs	r2, #70	; 0x46
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	223e      	movs	r2, #62	; 0x3e
 8003bce:	2101      	movs	r1, #1
 8003bd0:	5499      	strb	r1, [r3, r2]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	223f      	movs	r2, #63	; 0x3f
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	2101      	movs	r1, #1
 8003be0:	5499      	strb	r1, [r3, r2]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2241      	movs	r2, #65	; 0x41
 8003be6:	2101      	movs	r1, #1
 8003be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2242      	movs	r2, #66	; 0x42
 8003bee:	2101      	movs	r1, #1
 8003bf0:	5499      	strb	r1, [r3, r2]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2243      	movs	r2, #67	; 0x43
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2244      	movs	r2, #68	; 0x44
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2245      	movs	r2, #69	; 0x45
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	223d      	movs	r2, #61	; 0x3d
 8003c0e:	2101      	movs	r1, #1
 8003c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e042      	b.n	8003cb4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	223d      	movs	r2, #61	; 0x3d
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	223c      	movs	r2, #60	; 0x3c
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 f839 	bl	8003cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	223d      	movs	r2, #61	; 0x3d
 8003c4e:	2102      	movs	r1, #2
 8003c50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	0010      	movs	r0, r2
 8003c5e:	f000 fa87 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2246      	movs	r2, #70	; 0x46
 8003c66:	2101      	movs	r1, #1
 8003c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223e      	movs	r2, #62	; 0x3e
 8003c6e:	2101      	movs	r1, #1
 8003c70:	5499      	strb	r1, [r3, r2]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	223f      	movs	r2, #63	; 0x3f
 8003c76:	2101      	movs	r1, #1
 8003c78:	5499      	strb	r1, [r3, r2]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2240      	movs	r2, #64	; 0x40
 8003c7e:	2101      	movs	r1, #1
 8003c80:	5499      	strb	r1, [r3, r2]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2241      	movs	r2, #65	; 0x41
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2242      	movs	r2, #66	; 0x42
 8003c8e:	2101      	movs	r1, #1
 8003c90:	5499      	strb	r1, [r3, r2]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2243      	movs	r2, #67	; 0x43
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2244      	movs	r2, #68	; 0x44
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	5499      	strb	r1, [r3, r2]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2245      	movs	r2, #69	; 0x45
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	223d      	movs	r2, #61	; 0x3d
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <HAL_TIM_PWM_Start+0x22>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	223e      	movs	r2, #62	; 0x3e
 8003ce0:	5c9b      	ldrb	r3, [r3, r2]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	1e5a      	subs	r2, r3, #1
 8003ce8:	4193      	sbcs	r3, r2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	e01f      	b.n	8003d2e <HAL_TIM_PWM_Start+0x62>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d108      	bne.n	8003d06 <HAL_TIM_PWM_Start+0x3a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	223f      	movs	r2, #63	; 0x3f
 8003cf8:	5c9b      	ldrb	r3, [r3, r2]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	1e5a      	subs	r2, r3, #1
 8003d00:	4193      	sbcs	r3, r2
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e013      	b.n	8003d2e <HAL_TIM_PWM_Start+0x62>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x52>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	5c9b      	ldrb	r3, [r3, r2]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	1e5a      	subs	r2, r3, #1
 8003d18:	4193      	sbcs	r3, r2
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e007      	b.n	8003d2e <HAL_TIM_PWM_Start+0x62>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	5c9b      	ldrb	r3, [r3, r2]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	4193      	sbcs	r3, r2
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e074      	b.n	8003e20 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x7a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	223e      	movs	r2, #62	; 0x3e
 8003d40:	2102      	movs	r1, #2
 8003d42:	5499      	strb	r1, [r3, r2]
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start+0x8a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223f      	movs	r2, #63	; 0x3f
 8003d50:	2102      	movs	r1, #2
 8003d52:	5499      	strb	r1, [r3, r2]
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start+0x9a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2240      	movs	r2, #64	; 0x40
 8003d60:	2102      	movs	r1, #2
 8003d62:	5499      	strb	r1, [r3, r2]
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	; 0x41
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 fd10 	bl	800479c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <HAL_TIM_PWM_Start+0x15c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIM_PWM_Start+0xd8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <HAL_TIM_PWM_Start+0x160>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIM_PWM_Start+0xd8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <HAL_TIM_PWM_Start+0x164>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIM_PWM_Start+0xd8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <HAL_TIM_PWM_Start+0x168>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_TIM_PWM_Start+0xdc>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_TIM_PWM_Start+0xde>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	0209      	lsls	r1, r1, #8
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <HAL_TIM_PWM_Start+0x15c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00f      	beq.n	8003dea <HAL_TIM_PWM_Start+0x11e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	05db      	lsls	r3, r3, #23
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d009      	beq.n	8003dea <HAL_TIM_PWM_Start+0x11e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <HAL_TIM_PWM_Start+0x16c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIM_PWM_Start+0x11e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_TIM_PWM_Start+0x160>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d111      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2207      	movs	r2, #7
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b06      	cmp	r3, #6
 8003dfa:	d010      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2101      	movs	r1, #1
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	e007      	b.n	8003e1e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b004      	add	sp, #16
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	40000400 	.word	0x40000400

08003e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e48:	2317      	movs	r3, #23
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	223c      	movs	r2, #60	; 0x3c
 8003e54:	5c9b      	ldrb	r3, [r3, r2]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0ad      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	223c      	movs	r2, #60	; 0x3c
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d100      	bne.n	8003e6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e6c:	e076      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x120>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	d900      	bls.n	8003e76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003e74:	e095      	b.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d04e      	beq.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0xde>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d900      	bls.n	8003e84 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003e82:	e08e      	b.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d021      	beq.n	8003ed4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003e90:	e087      	b.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0011      	movs	r1, r2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 f9e8 	bl	8004270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2108      	movs	r1, #8
 8003eac:	430a      	orrs	r2, r1
 8003eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2104      	movs	r1, #4
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6999      	ldr	r1, [r3, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	619a      	str	r2, [r3, #24]
      break;
 8003ed2:	e06b      	b.n	8003fac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	0011      	movs	r1, r2
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 fa4f 	bl	8004380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2180      	movs	r1, #128	; 0x80
 8003eee:	0109      	lsls	r1, r1, #4
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4931      	ldr	r1, [pc, #196]	; (8003fc4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f00:	400a      	ands	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6999      	ldr	r1, [r3, #24]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	021a      	lsls	r2, r3, #8
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	619a      	str	r2, [r3, #24]
      break;
 8003f18:	e048      	b.n	8003fac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	0011      	movs	r1, r2
 8003f22:	0018      	movs	r0, r3
 8003f24:	f000 fab0 	bl	8004488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2108      	movs	r1, #8
 8003f34:	430a      	orrs	r2, r1
 8003f36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2104      	movs	r1, #4
 8003f44:	438a      	bics	r2, r1
 8003f46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69d9      	ldr	r1, [r3, #28]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	61da      	str	r2, [r3, #28]
      break;
 8003f5a:	e027      	b.n	8003fac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 fb15 	bl	8004594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2180      	movs	r1, #128	; 0x80
 8003f76:	0109      	lsls	r1, r1, #4
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	490f      	ldr	r1, [pc, #60]	; (8003fc4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f88:	400a      	ands	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69d9      	ldr	r1, [r3, #28]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	021a      	lsls	r2, r3, #8
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	61da      	str	r2, [r3, #28]
      break;
 8003fa0:	e004      	b.n	8003fac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003fa2:	2317      	movs	r3, #23
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
      break;
 8003faa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	223c      	movs	r2, #60	; 0x3c
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

  return status;
 8003fb4:	2317      	movs	r3, #23
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	781b      	ldrb	r3, [r3, #0]
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b006      	add	sp, #24
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	fffffbff 	.word	0xfffffbff

08003fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd2:	230f      	movs	r3, #15
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	223c      	movs	r2, #60	; 0x3c
 8003fde:	5c9b      	ldrb	r3, [r3, r2]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIM_ConfigClockSource+0x20>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e0bc      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x19a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	223c      	movs	r2, #60	; 0x3c
 8003fec:	2101      	movs	r1, #1
 8003fee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	223d      	movs	r2, #61	; 0x3d
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2277      	movs	r2, #119	; 0x77
 8004004:	4393      	bics	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a58      	ldr	r2, [pc, #352]	; (800416c <HAL_TIM_ConfigClockSource+0x1a4>)
 800400c:	4013      	ands	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	0192      	lsls	r2, r2, #6
 8004020:	4293      	cmp	r3, r2
 8004022:	d040      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0xde>
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0192      	lsls	r2, r2, #6
 8004028:	4293      	cmp	r3, r2
 800402a:	d900      	bls.n	800402e <HAL_TIM_ConfigClockSource+0x66>
 800402c:	e088      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	0152      	lsls	r2, r2, #5
 8004032:	4293      	cmp	r3, r2
 8004034:	d100      	bne.n	8004038 <HAL_TIM_ConfigClockSource+0x70>
 8004036:	e088      	b.n	800414a <HAL_TIM_ConfigClockSource+0x182>
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	0152      	lsls	r2, r2, #5
 800403c:	4293      	cmp	r3, r2
 800403e:	d900      	bls.n	8004042 <HAL_TIM_ConfigClockSource+0x7a>
 8004040:	e07e      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 8004042:	2b70      	cmp	r3, #112	; 0x70
 8004044:	d018      	beq.n	8004078 <HAL_TIM_ConfigClockSource+0xb0>
 8004046:	d900      	bls.n	800404a <HAL_TIM_ConfigClockSource+0x82>
 8004048:	e07a      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 800404a:	2b60      	cmp	r3, #96	; 0x60
 800404c:	d04f      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x126>
 800404e:	d900      	bls.n	8004052 <HAL_TIM_ConfigClockSource+0x8a>
 8004050:	e076      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 8004052:	2b50      	cmp	r3, #80	; 0x50
 8004054:	d03b      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x106>
 8004056:	d900      	bls.n	800405a <HAL_TIM_ConfigClockSource+0x92>
 8004058:	e072      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d057      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x146>
 800405e:	d900      	bls.n	8004062 <HAL_TIM_ConfigClockSource+0x9a>
 8004060:	e06e      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 8004062:	2b30      	cmp	r3, #48	; 0x30
 8004064:	d063      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x166>
 8004066:	d86b      	bhi.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 8004068:	2b20      	cmp	r3, #32
 800406a:	d060      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x166>
 800406c:	d868      	bhi.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d05d      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x166>
 8004072:	2b10      	cmp	r3, #16
 8004074:	d05b      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x166>
 8004076:	e063      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f000 fb68 	bl	800475c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2277      	movs	r2, #119	; 0x77
 8004098:	4313      	orrs	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]
      break;
 80040a4:	e052      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6899      	ldr	r1, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f000 fb51 	bl	800475c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2180      	movs	r1, #128	; 0x80
 80040c6:	01c9      	lsls	r1, r1, #7
 80040c8:	430a      	orrs	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
      break;
 80040cc:	e03e      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	001a      	movs	r2, r3
 80040dc:	f000 fac4 	bl	8004668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2150      	movs	r1, #80	; 0x50
 80040e6:	0018      	movs	r0, r3
 80040e8:	f000 fb1e 	bl	8004728 <TIM_ITRx_SetConfig>
      break;
 80040ec:	e02e      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	001a      	movs	r2, r3
 80040fc:	f000 fae2 	bl	80046c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2160      	movs	r1, #96	; 0x60
 8004106:	0018      	movs	r0, r3
 8004108:	f000 fb0e 	bl	8004728 <TIM_ITRx_SetConfig>
      break;
 800410c:	e01e      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	001a      	movs	r2, r3
 800411c:	f000 faa4 	bl	8004668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2140      	movs	r1, #64	; 0x40
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fafe 	bl	8004728 <TIM_ITRx_SetConfig>
      break;
 800412c:	e00e      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	0019      	movs	r1, r3
 8004138:	0010      	movs	r0, r2
 800413a:	f000 faf5 	bl	8004728 <TIM_ITRx_SetConfig>
      break;
 800413e:	e005      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004140:	230f      	movs	r3, #15
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
      break;
 8004148:	e000      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800414a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	223d      	movs	r2, #61	; 0x3d
 8004150:	2101      	movs	r1, #1
 8004152:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	223c      	movs	r2, #60	; 0x3c
 8004158:	2100      	movs	r1, #0
 800415a:	5499      	strb	r1, [r3, r2]

  return status;
 800415c:	230f      	movs	r3, #15
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	b004      	add	sp, #16
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	ffff00ff 	.word	0xffff00ff

08004170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a34      	ldr	r2, [pc, #208]	; (8004254 <TIM_Base_SetConfig+0xe4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d008      	beq.n	800419a <TIM_Base_SetConfig+0x2a>
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	05db      	lsls	r3, r3, #23
 800418e:	429a      	cmp	r2, r3
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0x2a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a30      	ldr	r2, [pc, #192]	; (8004258 <TIM_Base_SetConfig+0xe8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2270      	movs	r2, #112	; 0x70
 800419e:	4393      	bics	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a29      	ldr	r2, [pc, #164]	; (8004254 <TIM_Base_SetConfig+0xe4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d018      	beq.n	80041e6 <TIM_Base_SetConfig+0x76>
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	05db      	lsls	r3, r3, #23
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d013      	beq.n	80041e6 <TIM_Base_SetConfig+0x76>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <TIM_Base_SetConfig+0xe8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_Base_SetConfig+0x76>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a24      	ldr	r2, [pc, #144]	; (800425c <TIM_Base_SetConfig+0xec>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0x76>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a23      	ldr	r2, [pc, #140]	; (8004260 <TIM_Base_SetConfig+0xf0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0x76>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a22      	ldr	r2, [pc, #136]	; (8004264 <TIM_Base_SetConfig+0xf4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0x76>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <TIM_Base_SetConfig+0xf8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <TIM_Base_SetConfig+0xfc>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	4393      	bics	r3, r2
 80041fe:	001a      	movs	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <TIM_Base_SetConfig+0xe4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0xce>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <TIM_Base_SetConfig+0xf0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0xce>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <TIM_Base_SetConfig+0xf4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0xce>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <TIM_Base_SetConfig+0xf8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d103      	bne.n	8004246 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	615a      	str	r2, [r3, #20]
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b004      	add	sp, #16
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40000400 	.word	0x40000400
 800425c:	40002000 	.word	0x40002000
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800
 800426c:	fffffcff 	.word	0xfffffcff

08004270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	2201      	movs	r2, #1
 8004280:	4393      	bics	r3, r2
 8004282:	001a      	movs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2270      	movs	r2, #112	; 0x70
 800429e:	4393      	bics	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2203      	movs	r2, #3
 80042a6:	4393      	bics	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2202      	movs	r2, #2
 80042b8:	4393      	bics	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <TIM_OC1_SetConfig+0xf8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <TIM_OC1_SetConfig+0x76>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_OC1_SetConfig+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_OC1_SetConfig+0x76>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <TIM_OC1_SetConfig+0x100>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC1_SetConfig+0x76>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a24      	ldr	r2, [pc, #144]	; (8004374 <TIM_OC1_SetConfig+0x104>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10c      	bne.n	8004300 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2208      	movs	r2, #8
 80042ea:	4393      	bics	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4393      	bics	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a19      	ldr	r2, [pc, #100]	; (8004368 <TIM_OC1_SetConfig+0xf8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_OC1_SetConfig+0xb0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a18      	ldr	r2, [pc, #96]	; (800436c <TIM_OC1_SetConfig+0xfc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_OC1_SetConfig+0xb0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <TIM_OC1_SetConfig+0x100>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC1_SetConfig+0xb0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a16      	ldr	r2, [pc, #88]	; (8004374 <TIM_OC1_SetConfig+0x104>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d111      	bne.n	8004344 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <TIM_OC1_SetConfig+0x108>)
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4a14      	ldr	r2, [pc, #80]	; (800437c <TIM_OC1_SetConfig+0x10c>)
 800432c:	4013      	ands	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b006      	add	sp, #24
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40014000 	.word	0x40014000
 8004370:	40014400 	.word	0x40014400
 8004374:	40014800 	.word	0x40014800
 8004378:	fffffeff 	.word	0xfffffeff
 800437c:	fffffdff 	.word	0xfffffdff

08004380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	2210      	movs	r2, #16
 8004390:	4393      	bics	r3, r2
 8004392:	001a      	movs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a2e      	ldr	r2, [pc, #184]	; (8004468 <TIM_OC2_SetConfig+0xe8>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a2d      	ldr	r2, [pc, #180]	; (800446c <TIM_OC2_SetConfig+0xec>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2220      	movs	r2, #32
 80043ca:	4393      	bics	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a24      	ldr	r2, [pc, #144]	; (8004470 <TIM_OC2_SetConfig+0xf0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10d      	bne.n	80043fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	4393      	bics	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2240      	movs	r2, #64	; 0x40
 80043fa:	4393      	bics	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <TIM_OC2_SetConfig+0xf0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_OC2_SetConfig+0x9e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1a      	ldr	r2, [pc, #104]	; (8004474 <TIM_OC2_SetConfig+0xf4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_OC2_SetConfig+0x9e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a19      	ldr	r2, [pc, #100]	; (8004478 <TIM_OC2_SetConfig+0xf8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC2_SetConfig+0x9e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <TIM_OC2_SetConfig+0xfc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d113      	bne.n	8004446 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4a17      	ldr	r2, [pc, #92]	; (8004480 <TIM_OC2_SetConfig+0x100>)
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4a16      	ldr	r2, [pc, #88]	; (8004484 <TIM_OC2_SetConfig+0x104>)
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	621a      	str	r2, [r3, #32]
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b006      	add	sp, #24
 8004466:	bd80      	pop	{r7, pc}
 8004468:	ffff8fff 	.word	0xffff8fff
 800446c:	fffffcff 	.word	0xfffffcff
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800
 8004480:	fffffbff 	.word	0xfffffbff
 8004484:	fffff7ff 	.word	0xfffff7ff

08004488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4a35      	ldr	r2, [pc, #212]	; (800456c <TIM_OC3_SetConfig+0xe4>)
 8004498:	401a      	ands	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2270      	movs	r2, #112	; 0x70
 80044b4:	4393      	bics	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2203      	movs	r2, #3
 80044bc:	4393      	bics	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4a28      	ldr	r2, [pc, #160]	; (8004570 <TIM_OC3_SetConfig+0xe8>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <TIM_OC3_SetConfig+0xec>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10d      	bne.n	8004502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <TIM_OC3_SetConfig+0xf0>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4a1f      	ldr	r2, [pc, #124]	; (800457c <TIM_OC3_SetConfig+0xf4>)
 80044fe:	4013      	ands	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <TIM_OC3_SetConfig+0xec>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00b      	beq.n	8004522 <TIM_OC3_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <TIM_OC3_SetConfig+0xf8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <TIM_OC3_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <TIM_OC3_SetConfig+0xfc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_OC3_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <TIM_OC3_SetConfig+0x100>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d113      	bne.n	800454a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <TIM_OC3_SetConfig+0x104>)
 8004526:	4013      	ands	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <TIM_OC3_SetConfig+0x108>)
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	46bd      	mov	sp, r7
 8004568:	b006      	add	sp, #24
 800456a:	bd80      	pop	{r7, pc}
 800456c:	fffffeff 	.word	0xfffffeff
 8004570:	fffffdff 	.word	0xfffffdff
 8004574:	40012c00 	.word	0x40012c00
 8004578:	fffff7ff 	.word	0xfffff7ff
 800457c:	fffffbff 	.word	0xfffffbff
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800
 800458c:	ffffefff 	.word	0xffffefff
 8004590:	ffffdfff 	.word	0xffffdfff

08004594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a28      	ldr	r2, [pc, #160]	; (8004644 <TIM_OC4_SetConfig+0xb0>)
 80045a4:	401a      	ands	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a22      	ldr	r2, [pc, #136]	; (8004648 <TIM_OC4_SetConfig+0xb4>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a21      	ldr	r2, [pc, #132]	; (800464c <TIM_OC4_SetConfig+0xb8>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <TIM_OC4_SetConfig+0xbc>)
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	031b      	lsls	r3, r3, #12
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a19      	ldr	r2, [pc, #100]	; (8004654 <TIM_OC4_SetConfig+0xc0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00b      	beq.n	800460c <TIM_OC4_SetConfig+0x78>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <TIM_OC4_SetConfig+0xc4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_OC4_SetConfig+0x78>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a17      	ldr	r2, [pc, #92]	; (800465c <TIM_OC4_SetConfig+0xc8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC4_SetConfig+0x78>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <TIM_OC4_SetConfig+0xcc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d109      	bne.n	8004620 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <TIM_OC4_SetConfig+0xd0>)
 8004610:	4013      	ands	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	46bd      	mov	sp, r7
 800463e:	b006      	add	sp, #24
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	ffffefff 	.word	0xffffefff
 8004648:	ffff8fff 	.word	0xffff8fff
 800464c:	fffffcff 	.word	0xfffffcff
 8004650:	ffffdfff 	.word	0xffffdfff
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	ffffbfff 	.word	0xffffbfff

08004668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	2201      	movs	r2, #1
 8004680:	4393      	bics	r3, r2
 8004682:	001a      	movs	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	22f0      	movs	r2, #240	; 0xf0
 8004692:	4393      	bics	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	220a      	movs	r2, #10
 80046a4:	4393      	bics	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b006      	add	sp, #24
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	2210      	movs	r2, #16
 80046d6:	4393      	bics	r3, r2
 80046d8:	001a      	movs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <TIM_TI2_ConfigInputStage+0x60>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	031b      	lsls	r3, r3, #12
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	22a0      	movs	r2, #160	; 0xa0
 8004700:	4393      	bics	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b006      	add	sp, #24
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	ffff0fff 	.word	0xffff0fff

08004728 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2270      	movs	r2, #112	; 0x70
 800473c:	4393      	bics	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	2207      	movs	r2, #7
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <TIM_ETR_SetConfig+0x3c>)
 8004774:	4013      	ands	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	021a      	lsls	r2, r3, #8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	431a      	orrs	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	609a      	str	r2, [r3, #8]
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b006      	add	sp, #24
 8004796:	bd80      	pop	{r7, pc}
 8004798:	ffff00ff 	.word	0xffff00ff

0800479c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	221f      	movs	r2, #31
 80047ac:	4013      	ands	r3, r2
 80047ae:	2201      	movs	r2, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	0013      	movs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	43d2      	mvns	r2, r2
 80047be:	401a      	ands	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	211f      	movs	r1, #31
 80047cc:	400b      	ands	r3, r1
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4099      	lsls	r1, r3
 80047d2:	000b      	movs	r3, r1
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b006      	add	sp, #24
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	223c      	movs	r2, #60	; 0x3c
 80047f2:	5c9b      	ldrb	r3, [r3, r2]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e047      	b.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	223c      	movs	r2, #60	; 0x3c
 8004800:	2101      	movs	r1, #1
 8004802:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	223d      	movs	r2, #61	; 0x3d
 8004808:	2102      	movs	r1, #2
 800480a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2270      	movs	r2, #112	; 0x70
 8004820:	4393      	bics	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a16      	ldr	r2, [pc, #88]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00f      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	05db      	lsls	r3, r3, #23
 8004848:	429a      	cmp	r2, r3
 800484a:	d009      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a11      	ldr	r2, [pc, #68]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a10      	ldr	r2, [pc, #64]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10c      	bne.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	4393      	bics	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	223d      	movs	r2, #61	; 0x3d
 800487e:	2101      	movs	r1, #1
 8004880:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223c      	movs	r2, #60	; 0x3c
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	0018      	movs	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	b004      	add	sp, #16
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40000400 	.word	0x40000400
 800489c:	40014000 	.word	0x40014000

080048a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	223c      	movs	r2, #60	; 0x3c
 80048b2:	5c9b      	ldrb	r3, [r3, r2]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e03e      	b.n	800493a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	223c      	movs	r2, #60	; 0x3c
 80048c0:	2101      	movs	r1, #1
 80048c2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	4393      	bics	r3, r2
 80048ca:	001a      	movs	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	; (8004944 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80048d8:	401a      	ands	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a18      	ldr	r2, [pc, #96]	; (8004948 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80048e6:	401a      	ands	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80048f4:	401a      	ands	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a13      	ldr	r2, [pc, #76]	; (8004950 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004902:	401a      	ands	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a11      	ldr	r2, [pc, #68]	; (8004954 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004910:	401a      	ands	r2, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800491e:	401a      	ands	r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	223c      	movs	r2, #60	; 0x3c
 8004934:	2100      	movs	r1, #0
 8004936:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b004      	add	sp, #16
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	fffffcff 	.word	0xfffffcff
 8004948:	fffffbff 	.word	0xfffffbff
 800494c:	fffff7ff 	.word	0xfffff7ff
 8004950:	ffffefff 	.word	0xffffefff
 8004954:	ffffdfff 	.word	0xffffdfff
 8004958:	ffffbfff 	.word	0xffffbfff

0800495c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e044      	b.n	80049f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2274      	movs	r2, #116	; 0x74
 800497a:	2100      	movs	r1, #0
 800497c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f7fd f8d7 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2224      	movs	r2, #36	; 0x24
 800498a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2101      	movs	r1, #1
 8004998:	438a      	bics	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 f830 	bl	8004a04 <UART_SetConfig>
 80049a4:	0003      	movs	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e024      	b.n	80049f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 f9ab 	bl	8004d14 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	490d      	ldr	r1, [pc, #52]	; (8004a00 <HAL_UART_Init+0xa4>)
 80049ca:	400a      	ands	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	212a      	movs	r1, #42	; 0x2a
 80049da:	438a      	bics	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2101      	movs	r1, #1
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f000 fa43 	bl	8004e7c <UART_CheckIdleState>
 80049f6:	0003      	movs	r3, r0
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b002      	add	sp, #8
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	ffffb7ff 	.word	0xffffb7ff

08004a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a0c:	231e      	movs	r3, #30
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4aaf      	ldr	r2, [pc, #700]	; (8004cf0 <UART_SetConfig+0x2ec>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4aaa      	ldr	r2, [pc, #680]	; (8004cf4 <UART_SetConfig+0x2f0>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4aa1      	ldr	r2, [pc, #644]	; (8004cf8 <UART_SetConfig+0x2f4>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a9d      	ldr	r2, [pc, #628]	; (8004cfc <UART_SetConfig+0x2f8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d127      	bne.n	8004ada <UART_SetConfig+0xd6>
 8004a8a:	4b9d      	ldr	r3, [pc, #628]	; (8004d00 <UART_SetConfig+0x2fc>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	2203      	movs	r2, #3
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d00d      	beq.n	8004ab2 <UART_SetConfig+0xae>
 8004a96:	d81b      	bhi.n	8004ad0 <UART_SetConfig+0xcc>
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d014      	beq.n	8004ac6 <UART_SetConfig+0xc2>
 8004a9c:	d818      	bhi.n	8004ad0 <UART_SetConfig+0xcc>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <UART_SetConfig+0xa4>
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d00a      	beq.n	8004abc <UART_SetConfig+0xb8>
 8004aa6:	e013      	b.n	8004ad0 <UART_SetConfig+0xcc>
 8004aa8:	231f      	movs	r3, #31
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e065      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004ab2:	231f      	movs	r3, #31
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	e060      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004abc:	231f      	movs	r3, #31
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e05b      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004ac6:	231f      	movs	r3, #31
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	2208      	movs	r2, #8
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e056      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004ad0:	231f      	movs	r3, #31
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e051      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a89      	ldr	r2, [pc, #548]	; (8004d04 <UART_SetConfig+0x300>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d134      	bne.n	8004b4e <UART_SetConfig+0x14a>
 8004ae4:	4b86      	ldr	r3, [pc, #536]	; (8004d00 <UART_SetConfig+0x2fc>)
 8004ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae8:	23c0      	movs	r3, #192	; 0xc0
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	4013      	ands	r3, r2
 8004aee:	22c0      	movs	r2, #192	; 0xc0
 8004af0:	0292      	lsls	r2, r2, #10
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d017      	beq.n	8004b26 <UART_SetConfig+0x122>
 8004af6:	22c0      	movs	r2, #192	; 0xc0
 8004af8:	0292      	lsls	r2, r2, #10
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d822      	bhi.n	8004b44 <UART_SetConfig+0x140>
 8004afe:	2280      	movs	r2, #128	; 0x80
 8004b00:	0292      	lsls	r2, r2, #10
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d019      	beq.n	8004b3a <UART_SetConfig+0x136>
 8004b06:	2280      	movs	r2, #128	; 0x80
 8004b08:	0292      	lsls	r2, r2, #10
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d81a      	bhi.n	8004b44 <UART_SetConfig+0x140>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <UART_SetConfig+0x118>
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	0252      	lsls	r2, r2, #9
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00a      	beq.n	8004b30 <UART_SetConfig+0x12c>
 8004b1a:	e013      	b.n	8004b44 <UART_SetConfig+0x140>
 8004b1c:	231f      	movs	r3, #31
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e02b      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004b26:	231f      	movs	r3, #31
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e026      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004b30:	231f      	movs	r3, #31
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2204      	movs	r2, #4
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	e021      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004b3a:	231f      	movs	r3, #31
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	2208      	movs	r2, #8
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e01c      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004b44:	231f      	movs	r3, #31
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	2210      	movs	r2, #16
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e017      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6d      	ldr	r2, [pc, #436]	; (8004d08 <UART_SetConfig+0x304>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d104      	bne.n	8004b62 <UART_SetConfig+0x15e>
 8004b58:	231f      	movs	r3, #31
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e00d      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a69      	ldr	r2, [pc, #420]	; (8004d0c <UART_SetConfig+0x308>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d104      	bne.n	8004b76 <UART_SetConfig+0x172>
 8004b6c:	231f      	movs	r3, #31
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e003      	b.n	8004b7e <UART_SetConfig+0x17a>
 8004b76:	231f      	movs	r3, #31
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d15d      	bne.n	8004c46 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8004b8a:	231f      	movs	r3, #31
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d015      	beq.n	8004bc0 <UART_SetConfig+0x1bc>
 8004b94:	dc18      	bgt.n	8004bc8 <UART_SetConfig+0x1c4>
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d00d      	beq.n	8004bb6 <UART_SetConfig+0x1b2>
 8004b9a:	dc15      	bgt.n	8004bc8 <UART_SetConfig+0x1c4>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <UART_SetConfig+0x1a2>
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d005      	beq.n	8004bb0 <UART_SetConfig+0x1ac>
 8004ba4:	e010      	b.n	8004bc8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba6:	f7fd ffd3 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8004baa:	0003      	movs	r3, r0
 8004bac:	61bb      	str	r3, [r7, #24]
        break;
 8004bae:	e012      	b.n	8004bd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b57      	ldr	r3, [pc, #348]	; (8004d10 <UART_SetConfig+0x30c>)
 8004bb2:	61bb      	str	r3, [r7, #24]
        break;
 8004bb4:	e00f      	b.n	8004bd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fd ff41 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	61bb      	str	r3, [r7, #24]
        break;
 8004bbe:	e00a      	b.n	8004bd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	61bb      	str	r3, [r7, #24]
        break;
 8004bc6:	e006      	b.n	8004bd6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bcc:	231e      	movs	r3, #30
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
        break;
 8004bd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d100      	bne.n	8004bde <UART_SetConfig+0x1da>
 8004bdc:	e07b      	b.n	8004cd6 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	005a      	lsls	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	18d2      	adds	r2, r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0019      	movs	r1, r3
 8004bf0:	0010      	movs	r0, r2
 8004bf2:	f7fb fa89 	bl	8000108 <__udivsi3>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	d91c      	bls.n	8004c3c <UART_SetConfig+0x238>
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d217      	bcs.n	8004c3c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	200e      	movs	r0, #14
 8004c12:	183b      	adds	r3, r7, r0
 8004c14:	210f      	movs	r1, #15
 8004c16:	438a      	bics	r2, r1
 8004c18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2207      	movs	r2, #7
 8004c22:	4013      	ands	r3, r2
 8004c24:	b299      	uxth	r1, r3
 8004c26:	183b      	adds	r3, r7, r0
 8004c28:	183a      	adds	r2, r7, r0
 8004c2a:	8812      	ldrh	r2, [r2, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	183a      	adds	r2, r7, r0
 8004c36:	8812      	ldrh	r2, [r2, #0]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	e04c      	b.n	8004cd6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3c:	231e      	movs	r3, #30
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e047      	b.n	8004cd6 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c46:	231f      	movs	r3, #31
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d015      	beq.n	8004c7c <UART_SetConfig+0x278>
 8004c50:	dc18      	bgt.n	8004c84 <UART_SetConfig+0x280>
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d00d      	beq.n	8004c72 <UART_SetConfig+0x26e>
 8004c56:	dc15      	bgt.n	8004c84 <UART_SetConfig+0x280>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <UART_SetConfig+0x25e>
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d005      	beq.n	8004c6c <UART_SetConfig+0x268>
 8004c60:	e010      	b.n	8004c84 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c62:	f7fd ff75 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8004c66:	0003      	movs	r3, r0
 8004c68:	61bb      	str	r3, [r7, #24]
        break;
 8004c6a:	e012      	b.n	8004c92 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <UART_SetConfig+0x30c>)
 8004c6e:	61bb      	str	r3, [r7, #24]
        break;
 8004c70:	e00f      	b.n	8004c92 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7fd fee3 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8004c76:	0003      	movs	r3, r0
 8004c78:	61bb      	str	r3, [r7, #24]
        break;
 8004c7a:	e00a      	b.n	8004c92 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	61bb      	str	r3, [r7, #24]
        break;
 8004c82:	e006      	b.n	8004c92 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c88:	231e      	movs	r3, #30
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]
        break;
 8004c90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01e      	beq.n	8004cd6 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	085a      	lsrs	r2, r3, #1
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	18d2      	adds	r2, r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	0010      	movs	r0, r2
 8004caa:	f7fb fa2d 	bl	8000108 <__udivsi3>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d909      	bls.n	8004cce <UART_SetConfig+0x2ca>
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	025b      	lsls	r3, r3, #9
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d204      	bcs.n	8004cce <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	60da      	str	r2, [r3, #12]
 8004ccc:	e003      	b.n	8004cd6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004cce:	231e      	movs	r3, #30
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ce2:	231e      	movs	r3, #30
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	781b      	ldrb	r3, [r3, #0]
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b008      	add	sp, #32
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	efff69f3 	.word	0xefff69f3
 8004cf4:	ffffcfff 	.word	0xffffcfff
 8004cf8:	fffff4ff 	.word	0xfffff4ff
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40004400 	.word	0x40004400
 8004d08:	40004800 	.word	0x40004800
 8004d0c:	40004c00 	.word	0x40004c00
 8004d10:	007a1200 	.word	0x007a1200

08004d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2201      	movs	r2, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a4a      	ldr	r2, [pc, #296]	; (8004e58 <UART_AdvFeatureConfig+0x144>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2202      	movs	r2, #2
 8004d44:	4013      	ands	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4a43      	ldr	r2, [pc, #268]	; (8004e5c <UART_AdvFeatureConfig+0x148>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2204      	movs	r2, #4
 8004d66:	4013      	ands	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a3b      	ldr	r2, [pc, #236]	; (8004e60 <UART_AdvFeatureConfig+0x14c>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	0019      	movs	r1, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2208      	movs	r2, #8
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <UART_AdvFeatureConfig+0x150>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	0019      	movs	r1, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2210      	movs	r2, #16
 8004daa:	4013      	ands	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <UART_AdvFeatureConfig+0x154>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	2220      	movs	r2, #32
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <UART_AdvFeatureConfig+0x158>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2240      	movs	r2, #64	; 0x40
 8004dee:	4013      	ands	r3, r2
 8004df0:	d01d      	beq.n	8004e2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <UART_AdvFeatureConfig+0x15c>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	035b      	lsls	r3, r3, #13
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d10b      	bne.n	8004e2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <UART_AdvFeatureConfig+0x160>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2280      	movs	r2, #128	; 0x80
 8004e34:	4013      	ands	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <UART_AdvFeatureConfig+0x164>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	0019      	movs	r1, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	fffdffff 	.word	0xfffdffff
 8004e5c:	fffeffff 	.word	0xfffeffff
 8004e60:	fffbffff 	.word	0xfffbffff
 8004e64:	ffff7fff 	.word	0xffff7fff
 8004e68:	ffffefff 	.word	0xffffefff
 8004e6c:	ffffdfff 	.word	0xffffdfff
 8004e70:	ffefffff 	.word	0xffefffff
 8004e74:	ff9fffff 	.word	0xff9fffff
 8004e78:	fff7ffff 	.word	0xfff7ffff

08004e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	2100      	movs	r1, #0
 8004e8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e8c:	f7fc ff22 	bl	8001cd4 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2208      	movs	r2, #8
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d10c      	bne.n	8004ebc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2280      	movs	r2, #128	; 0x80
 8004ea6:	0391      	lsls	r1, r2, #14
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <UART_CheckIdleState+0x8c>)
 8004eac:	9200      	str	r2, [sp, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f000 f82c 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004eb4:	1e03      	subs	r3, r0, #0
 8004eb6:	d001      	beq.n	8004ebc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e021      	b.n	8004f00 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d10c      	bne.n	8004ee4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2280      	movs	r2, #128	; 0x80
 8004ece:	03d1      	lsls	r1, r2, #15
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4a0d      	ldr	r2, [pc, #52]	; (8004f08 <UART_CheckIdleState+0x8c>)
 8004ed4:	9200      	str	r2, [sp, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f000 f818 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004edc:	1e03      	subs	r3, r0, #0
 8004ede:	d001      	beq.n	8004ee4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e00d      	b.n	8004f00 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2274      	movs	r2, #116	; 0x74
 8004efa:	2100      	movs	r1, #0
 8004efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	01ffffff 	.word	0x01ffffff

08004f0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b094      	sub	sp, #80	; 0x50
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1c:	e0a3      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f20:	3301      	adds	r3, #1
 8004f22:	d100      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004f24:	e09f      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f26:	f7fc fed5 	bl	8001cd4 <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d13d      	bne.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f44:	647b      	str	r3, [r7, #68]	; 0x44
 8004f46:	2301      	movs	r3, #1
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	f383 8810 	msr	PRIMASK, r3
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	494c      	ldr	r1, [pc, #304]	; (8005090 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004f5e:	400a      	ands	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f64:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	f383 8810 	msr	PRIMASK, r3
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	643b      	str	r3, [r7, #64]	; 0x40
 8004f78:	2301      	movs	r3, #1
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	438a      	bics	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9a:	f383 8810 	msr	PRIMASK, r3
}
 8004f9e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2274      	movs	r2, #116	; 0x74
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e067      	b.n	8005088 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d050      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	401a      	ands	r2, r3
 8004fd0:	2380      	movs	r3, #128	; 0x80
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d146      	bne.n	8005066 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	0112      	lsls	r2, r2, #4
 8004fe0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe6:	613b      	str	r3, [r7, #16]
  return(result);
 8004fe8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	2301      	movs	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f383 8810 	msr	PRIMASK, r3
}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4923      	ldr	r1, [pc, #140]	; (8005090 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005004:	400a      	ands	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f383 8810 	msr	PRIMASK, r3
}
 8005012:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005014:	f3ef 8310 	mrs	r3, PRIMASK
 8005018:	61fb      	str	r3, [r7, #28]
  return(result);
 800501a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	64bb      	str	r3, [r7, #72]	; 0x48
 800501e:	2301      	movs	r3, #1
 8005020:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f383 8810 	msr	PRIMASK, r3
}
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	438a      	bics	r2, r1
 8005038:	609a      	str	r2, [r3, #8]
 800503a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	f383 8810 	msr	PRIMASK, r3
}
 8005044:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2280      	movs	r2, #128	; 0x80
 8005056:	2120      	movs	r1, #32
 8005058:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2274      	movs	r2, #116	; 0x74
 800505e:	2100      	movs	r1, #0
 8005060:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e010      	b.n	8005088 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	425a      	negs	r2, r3
 8005076:	4153      	adcs	r3, r2
 8005078:	b2db      	uxtb	r3, r3
 800507a:	001a      	movs	r2, r3
 800507c:	1dfb      	adds	r3, r7, #7
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d100      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005084:	e74b      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	0018      	movs	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	b014      	add	sp, #80	; 0x50
 800508e:	bd80      	pop	{r7, pc}
 8005090:	fffffe5f 	.word	0xfffffe5f

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	2600      	movs	r6, #0
 8005098:	4d0c      	ldr	r5, [pc, #48]	; (80050cc <__libc_init_array+0x38>)
 800509a:	4c0d      	ldr	r4, [pc, #52]	; (80050d0 <__libc_init_array+0x3c>)
 800509c:	1b64      	subs	r4, r4, r5
 800509e:	10a4      	asrs	r4, r4, #2
 80050a0:	42a6      	cmp	r6, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	2600      	movs	r6, #0
 80050a6:	f000 f821 	bl	80050ec <_init>
 80050aa:	4d0a      	ldr	r5, [pc, #40]	; (80050d4 <__libc_init_array+0x40>)
 80050ac:	4c0a      	ldr	r4, [pc, #40]	; (80050d8 <__libc_init_array+0x44>)
 80050ae:	1b64      	subs	r4, r4, r5
 80050b0:	10a4      	asrs	r4, r4, #2
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	00b3      	lsls	r3, r6, #2
 80050ba:	58eb      	ldr	r3, [r5, r3]
 80050bc:	4798      	blx	r3
 80050be:	3601      	adds	r6, #1
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	00b3      	lsls	r3, r6, #2
 80050c4:	58eb      	ldr	r3, [r5, r3]
 80050c6:	4798      	blx	r3
 80050c8:	3601      	adds	r6, #1
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	080051c0 	.word	0x080051c0
 80050d0:	080051c0 	.word	0x080051c0
 80050d4:	080051c0 	.word	0x080051c0
 80050d8:	080051c4 	.word	0x080051c4

080050dc <memset>:
 80050dc:	0003      	movs	r3, r0
 80050de:	1882      	adds	r2, r0, r2
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d100      	bne.n	80050e6 <memset+0xa>
 80050e4:	4770      	bx	lr
 80050e6:	7019      	strb	r1, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	e7f9      	b.n	80050e0 <memset+0x4>

080050ec <_init>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr

080050f8 <_fini>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr
